{
  "metadata": {
    "timestamp": "2025-06-02T10:37:12.447330",
    "operation": "create_content"
  },
  "data": {
    "thinking": "To create this How-To Guide, I am following the required structure: Introduction, Prerequisites, Steps, Verification, and Next Steps. The Introduction will set the context for Cilium integration with Azure CNI in AKS, referencing both the product requirements and Microsoft Learn documentation. Prerequisites will be explicitly listed, combining the AKS PRD and Microsoft Learn requirements. The Steps section will be detailed, covering: enabling Azure CNI powered by Cilium during AKS creation (with all three supported network models and Azure CLI commands), enabling and configuring CiliumEndpointSlices (with version and configuration notes), and explaining how Cilium uses eBPF for networking enhancements. I will include warnings and tips as per the brief, especially around security and compatibility. Verification will provide actionable steps to confirm Cilium is active, using sample outputs where possible. Best practices will be woven into the Steps and Verification sections. The Next Steps terminal section will summarize and guide the reader to further learning, as per the brief. All code and configuration examples will use placeholders. I will ensure all information is directly traceable to the provided materials and will use Microsoft documentation formatting throughout.",
    "content": "---\ntitle: Configure Azure CNI powered by Cilium in Azure Kubernetes Service (AKS)\ndescription: Learn how to enable and configure Azure CNI powered by Cilium in AKS, including CiliumEndpointSlices and eBPF-powered networking enhancements.\nms.topic: how-to\n---\n\n# Configure Azure CNI powered by Cilium in Azure Kubernetes Service (AKS)\n\n## Introduction\n\nAzure Kubernetes Service (AKS) now supports Azure CNI powered by Cilium, combining the robust control plane of Azure CNI with the advanced data plane of Cilium. This integration leverages eBPF (extended Berkeley Packet Filter) technology to deliver high-performance networking, dynamic endpoint management, and granular network policy enforcement. With the introduction of CiliumEndpointSlices, AKS clusters benefit from improved service discovery, scalability, and observability, making it easier to manage large-scale, secure, and efficient Kubernetes deployments.\n\nThis guide walks you through configuring Azure CNI powered by Cilium in AKS, enabling CiliumEndpointSlices, and verifying that advanced networking features are active. It also highlights best practices and important considerations for production environments.\n\n## Prerequisites\n\nBefore you begin, ensure you have the following:\n\n> [!div class=\"checklist\"]\n> * Basic understanding of AKS and Kubernetes networking concepts\n> * Permissions to create and manage AKS clusters in your Azure subscription\n> * Azure CLI version 2.48.1 or later installed and configured ([Install Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli))\n> * Familiarity with Kubernetes manifests and YAML\n> * (Optional) Access to Azure Monitor and Log Analytics for observability features\n\n> [!NOTE]\n> CiliumEndpointSlices are supported in AKS clusters running Kubernetes version 1.32 and above. Ensure your cluster version meets this requirement.\n\n## Steps\n\n### 1. Overview of Cilium Integration with Azure CNI in AKS\n\nAzure CNI powered by Cilium provides:\n- Functionality equivalent to existing Azure CNI and Azure CNI Overlay plugins\n- Improved service routing and efficient network policy enforcement\n- Enhanced observability of cluster traffic\n- Support for larger clusters (more nodes, pods, and services)\n- Native integration with Azure Monitor and Log Analytics for advanced diagnostics\n\nCilium uses eBPF programs loaded into the Linux kernel to provide high-performance packet processing, dynamic endpoint management, and advanced security policies.\n\n> [!WARNING]\n> Azure CNI powered by Cilium is only available for Linux nodes. Windows node support is not available.\n\n### 2. Create an AKS Cluster with Azure CNI Powered by Cilium\n\nYou can enable Azure CNI powered by Cilium during cluster creation using the Azure CLI. There are three primary network models:\n\n#### [Overlay Network](#tab/overlay)\nAssign pod IP addresses from an overlay network.\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-plugin-mode overlay \\\n  --pod-cidr 192.168.0.0/16 \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n> [!NOTE]\n> The `--network-dataplane cilium` flag replaces the deprecated `--enable-ebpf-dataplane` flag.\n\n#### [Virtual Network](#tab/vnet)\nAssign pod IP addresses from a dedicated subnet in a virtual network.\n\n```azurecli\n# Create the resource group\naz group create --name <resourceGroupName> --location <location>\n\n# Create a virtual network and subnets\naz network vnet create \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --name <vnetName> \\\n  --address-prefixes <addressPrefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name nodesubnet \\\n  --address-prefixes <nodeSubnetPrefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name podsubnet \\\n  --address-prefixes <podSubnetPrefix> -o none\n\n# Create the AKS cluster\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --max-pods 250 \\\n  --network-plugin azure \\\n  --vnet-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/nodesubnet \\\n  --pod-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/podsubnet \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n#### [Node Subnet](#tab/nodesubnet)\nAssign pod IP addresses from the node subnet.\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n---\n\n> [!WARNING]\n> Azure CNI powered by Cilium is not supported on Windows nodes. Ensure all nodes in your cluster are Linux-based.\n\n> [!TIP]\n> For guidance on choosing a network model, see [AKS networking concepts](https://learn.microsoft.com/azure/aks/network-concepts).\n\n### 3. Enable and Configure CiliumEndpointSlices\n\nCiliumEndpointSlices provide scalable management and grouping of pod endpoints, improving service discovery and load balancing.\n\n- CiliumEndpointSlices are automatically supported in AKS clusters running Kubernetes version 1.32 and above with Azure CNI powered by Cilium.\n- No manual configuration is required to enable CiliumEndpointSlices in supported clusters.\n- Customization of how Cilium endpoints are grouped is not supported in managed AKS; priority namespaces via `cilium.io/ces-namespace` are not available.\n\n> [!NOTE]\n> CiliumEndpointSlices do not support manual configuration of grouping in AKS. AKS manages these settings automatically.\n\n#### Example: Viewing CiliumEndpointSlices\n\n```azurecli\nkubectl get ciliumepslices -A\n```\n\n### 4. How Cilium Uses eBPF for Networking Enhancements\n\nCilium leverages eBPF (extended Berkeley Packet Filter) to:\n- Implement high-performance packet filtering and forwarding in the Linux kernel\n- Enforce network policies at Layers 3/4 (IP/port) and, with Advanced Container Networking Services, at Layer 7 (HTTP/gRPC/Kafka)\n- Replace kube-proxy for service routing, reducing latency and improving scalability\n- Provide detailed observability and telemetry for network traffic\n\n> [!TIP]\n> eBPF enables Cilium to dynamically update network rules without kernel module reloads, resulting in faster policy enforcement and lower operational overhead.\n\n### 5. Best Practices for Production Environments\n\n- **Cluster Version:** Use Kubernetes version 1.32 or later to ensure full support for CiliumEndpointSlices.\n- **Observability:** Integrate with Azure Monitor and Log Analytics for real-time visibility into endpoint slice health, latency, and error rates.\n- **Security:** Use Cilium\u2019s network policy engine to enforce granular security rules. All communications between components are encrypted and integrate with Azure Active Directory for authentication.\n- **Compatibility:** Review existing network policies for compatibility. Some features, such as `ipBlock` in network policies, have limitations (see below).\n- **Fallback:** AKS provides robust error handling and will revert to traditional endpoint management if CiliumEndpointSlices fail.\n\n> [!WARNING]\n> Network policies using `ipBlock` cannot allow access to node or pod IPs. Use `namespaceSelector` and `podSelector` as a workaround. See the example below.\n\n#### Example: NetworkPolicy Workaround\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: example-ipblock\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 0.0.0.0/0\n    - namespaceSelector: {}\n    - podSelector: {}\n```\n\n> [!TIP]\n> For advanced features such as FQDN filtering and Layer 7 policies, enable Advanced Container Networking Services (ACNS) on your cluster.\n\n## Verification\n\nAfter deploying your AKS cluster with Azure CNI powered by Cilium, verify that Cilium is active and functioning as expected.\n\n### 1. Check Cilium Pods\n\n```azurecli\nkubectl get pods -n kube-system -l k8s-app=cilium\n```\n\nExpected output:\n\n```output\nNAME             READY   STATUS    RESTARTS   AGE\ncilium-xxxxx     1/1     Running   0          5m\ncilium-xxxxx     1/1     Running   0          5m\n...\n```\n\n### 2. Confirm CiliumEndpointSlices\n\n```azurecli\nkubectl get ciliumepslices -A\n```\n\nExpected output:\n\n```output\nNAMESPACE   NAME                AGE\nkube-system ciliumepslice-xxx   2m\n...\n```\n\n### 3. Validate Network Policy Enforcement\n\nApply a test NetworkPolicy and verify traffic is allowed or denied as expected. Review Cilium logs for policy enforcement events:\n\n```azurecli\nkubectl logs -n kube-system -l k8s-app=cilium\n```\n\n> [!TIP]\n> For detailed observability, use Azure Monitor dashboards and Cilium\u2019s built-in metrics.\n\n## Next Steps\n\n- Explore advanced Cilium features such as network policies and observability tools.\n- Integrate Cilium with Azure Monitor for comprehensive network telemetry and diagnostics.\n- Review [AKS upgrade and maintenance considerations](https://learn.microsoft.com/azure/aks/upgrade-cluster) for Cilium-enabled clusters.\n- Learn more about [AKS networking concepts](https://learn.microsoft.com/azure/aks/network-concepts).\n\n> [!div class=\"nextstepaction\"]\n> [Learn more about AKS networking](https://learn.microsoft.com/azure/aks/network-concepts)\n",
    "metadata": {
      "word_count": 1580,
      "sections_created": [
        "Introduction",
        "Prerequisites",
        "Steps",
        "Verification",
        "Next Steps"
      ],
      "materials_used": [
        "./inputs/aks-prd-02.docx",
        "https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium"
      ],
      "key_topics_covered": [
        "Cilium",
        "Azure CNI",
        "CiliumEndpointSlices",
        "eBPF",
        "AKS Networking",
        "Network Policies",
        "Observability",
        "Production Best Practices"
      ]
    }
  }
}