{
  "metadata": {
    "timestamp": "2025-06-02T10:38:53.462264",
    "operation": "create_content"
  },
  "data": {
    "thinking": "To create this How-To Guide, I am following the specified section order: Introduction, Prerequisites, Steps, Verification, and Next Steps. The Introduction will set context by explaining Cilium, its benefits, and its integration with Azure CNI in AKS, referencing both the PRD and Microsoft Learn content. Prerequisites will clearly state the required knowledge and environment, as outlined in the content brief and materials. The Steps section will provide detailed, actionable instructions for enabling and configuring Cilium in AKS, including Azure CLI commands for various networking modes, and highlight configuration options and limitations from the materials. I will include a subsection on configuring and understanding CiliumEndpointSlices, using all available details. The Verification section will show how to confirm that Cilium is operational, using kubectl commands and best practices for troubleshooting, as described in the PRD and Learn doc. The Next Steps section will be terminal, summarizing what was covered and linking to related documentation and suggested follow-up actions. All warnings, notes, and tips will be formatted per Microsoft documentation standards. I will ensure completeness by cross-referencing every step and claim with the provided materials, and will not invent any technical details. If any required information is missing, I will mark it with a placeholder and include a gap report.",
    "content": "---\ntitle: Configure Cilium networking in Azure Kubernetes Service (AKS)\ndescription: Learn how to enable and configure Cilium as the network plugin in AKS, including CiliumEndpointSlices integration with Azure CNI, with step-by-step instructions and best practices.\nms.topic: how-to\n---\n\n# Configure Cilium networking in Azure Kubernetes Service (AKS)\n\n## Introduction\n\nCilium is an advanced Kubernetes networking plugin that leverages eBPF (extended Berkeley Packet Filter) for high-performance networking, dynamic endpoint management, and fine-grained network policy enforcement. Integrating Cilium with Azure CNI in Azure Kubernetes Service (AKS) enables:\n\n- Dynamic grouping and management of pod endpoints using CiliumEndpointSlices for efficient service discovery and load balancing\n- Advanced network policy enforcement using Cilium\u2019s native policy engine\n- Enhanced observability and diagnostics through integration with Azure Monitor and Cilium tools\n- Improved scalability and operational efficiency for large clusters\n\nAzure CNI powered by Cilium combines the robust control plane of Azure CNI with Cilium\u2019s data plane, providing improved service routing, efficient network policy enforcement, and better cluster traffic observability. This guide walks you through enabling and configuring Cilium in AKS, including CiliumEndpointSlices integration, and provides best practices for management and troubleshooting.\n\n## Prerequisites\n\nBefore you begin, ensure you have the following:\n\n> [!div class=\"checklist\"]\n> * Familiarity with Kubernetes networking concepts\n> * Access to an Azure subscription with permissions to create and manage AKS clusters\n> * Azure CLI version 2.48.1 or later installed and configured ([Install Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli))\n> * Basic knowledge of AKS cluster creation\n\n> [!NOTE]\n> CiliumEndpointSlices are supported in AKS clusters running Kubernetes version 1.32 and above. Ensure your cluster version meets this requirement.\n\n## Steps\n\n### 1. Understand Cilium and Azure CNI Integration\n\nAzure CNI powered by Cilium provides:\n\n- Functionality equivalent to existing Azure CNI and Azure CNI Overlay plugins\n- Improved service routing and efficient network policy enforcement\n- Support for larger clusters (more nodes, pods, and services)\n- Enhanced observability and integration with Azure Monitor\n\nCiliumEndpointSlices allow AKS to dynamically manage pod endpoints, automatically grouping them into slices for faster lookup, improved scalability, and efficient load balancing. Cilium\u2019s policy engine enforces security rules across these endpoint slices.\n\n> [!WARNING]\n> Cilium is only available for Linux nodes in AKS. Network policies using `ipBlock` cannot select pod or node IPs. CiliumEndpointSlices do not support custom grouping configuration or priority namespaces.\n\n### 2. Create a New AKS Cluster with Cilium Networking\n\nYou can enable Cilium as the network dataplane when creating a new AKS cluster. Choose the networking mode that fits your requirements:\n\n#### [Overlay Network](#tab/overlay)\n\nAssign pod IPs from an overlay network:\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-plugin-mode overlay \\\n  --pod-cidr 192.168.0.0/16 \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n#### [Virtual Network](#tab/vnet)\n\nAssign pod IPs from a virtual network:\n\n```azurecli\n# Create the resource group\naz group create --name <resourceGroupName> --location <location>\n\n# Create a virtual network and subnets\naz network vnet create \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --name <vnetName> \\\n  --address-prefixes <address-prefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name nodesubnet \\\n  --address-prefixes <node-address-prefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name podsubnet \\\n  --address-prefixes <pod-address-prefix> -o none\n\n# Create the AKS cluster\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --max-pods 250 \\\n  --network-plugin azure \\\n  --vnet-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/nodesubnet \\\n  --pod-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/podsubnet \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n#### [Node Subnet](#tab/nodesubnet)\n\nAssign pod IPs from the node subnet (Azure CLI 2.69.0+ required):\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n---\n\n> [!NOTE]\n> The `--network-dataplane cilium` flag is required to enable Cilium. For clusters using ARM templates or REST API, use API version 2022-09-02-preview or later.\n\n### 3. Enable and Configure CiliumEndpointSlices\n\nCiliumEndpointSlices are enabled by default when using Azure CNI powered by Cilium on supported Kubernetes versions (1.32+). They provide scalable management of pod endpoints and improve service discovery and load balancing.\n\n- Endpoint slices are created, updated, and deleted automatically based on pod status changes.\n- Synchronization between the Kubernetes API and Cilium ensures accurate endpoint state.\n- Cilium\u2019s policy engine enforces network policies across all endpoint slices.\n\n> [!NOTE]\n> Customization of how Cilium endpoints are grouped in slices is not supported. Priority namespaces via `cilium.io/ces-namespace` are not supported.\n\n#### Example: Viewing CiliumEndpointSlices\n\nTo view CiliumEndpointSlices in your cluster:\n\n```azurecli\nkubectl get ciliumepslices -A\n```\n\n#### Example: Inspecting a CiliumEndpointSlice\n\n```azurecli\nkubectl describe ciliumepslice <slice-name> -n <namespace>\n```\n\n> [!TIP]\n> Use Azure Monitor and Log Analytics for observability of endpoint slice operations, health, and latency.\n\n### 4. Upgrade Existing AKS Clusters to Use Cilium\n\nTo migrate an existing AKS cluster to use Cilium as the network dataplane, follow the documented AKS upgrade process and specify the `--network-dataplane cilium` flag. Refer to [AKS upgrade documentation](https://learn.microsoft.com/azure/aks/upgrade-cluster) for detailed steps.\n\n> [!WARNING]\n> Switching network plugins may cause temporary disruptions. Review compatibility and plan maintenance windows accordingly.\n\n### 5. Configure and Enforce Network Policies\n\nCilium enforces Kubernetes NetworkPolicy resources and supports advanced L3/L4 policies. For FQDN filtering and Layer 7 policies, enable Advanced Container Networking Services.\n\n> [!WARNING]\n> Network policies using `ipBlock` cannot select pod or node IPs. Use `namespaceSelector` and `podSelector` as a workaround.\n\n#### Example: NetworkPolicy with Workaround\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: example-ipblock\nspec:\n  podSelector: {}\n  policyTypes:\n    - Egress\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 0.0.0.0/0\n        - namespaceSelector: {}\n        - podSelector: {}\n```\n\n### 6. Observability and Monitoring\n\n- Integrate with Azure Monitor and Log Analytics to capture performance indicators, events, and error logs for endpoint slice operations.\n- Use out-of-the-box dashboards for endpoint slice health and latency.\n- Configure alerts for critical events such as synchronization failures or policy enforcement breaches.\n\n### 7. Best Practices and Troubleshooting\n\n- Ensure your AKS and Cilium versions are compatible (see [Supported Kubernetes Versions](https://learn.microsoft.com/azure/aks/supported-kubernetes-versions)).\n- Monitor cluster health and endpoint slice synchronization regularly.\n- Use Azure Monitor and Cilium observability tools for diagnostics.\n- Maintain RBAC best practices for secure cluster management.\n- Plan upgrades and network plugin changes during maintenance windows.\n\n> [!WARNING]\n> Misconfiguration of network policies may result in unintended traffic blocking or exposure. Always test policies in a non-production environment before applying to production clusters.\n\n## Verification\n\nAfter deploying or upgrading your AKS cluster with Cilium networking, verify that Cilium and CiliumEndpointSlices are operational:\n\n### 1. Check Cilium DaemonSet Status\n\n```azurecli\nkubectl get daemonset cilium -n kube-system\n```\n\nEnsure all pods are in the `Ready` state.\n\n### 2. List CiliumEndpointSlices\n\n```azurecli\nkubectl get ciliumepslices -A\n```\n\nYou should see endpoint slices listed for your workloads.\n\n### 3. Validate Network Policy Enforcement\n\nApply a test NetworkPolicy and verify traffic is allowed or denied as expected.\n\n### 4. Monitor Logs and Metrics\n\nUse Azure Monitor and Log Analytics to review logs and metrics related to Cilium and endpoint slices.\n\n> [!TIP]\n> For troubleshooting, consult both the Cilium and AKS documentation, and use diagnostic tools integrated with Azure Monitor.\n\n## Next Steps\n\n- Explore advanced Cilium features such as network policies and observability:\n  - [Cilium documentation](https://docs.cilium.io/en/stable/)\n  - [AKS documentation](https://docs.microsoft.com/azure/aks/)\n- Integrate Cilium with Azure Monitor for enhanced visibility and diagnostics.\n- Review [AKS upgrade considerations](https://learn.microsoft.com/azure/aks/upgrade-cluster) when using Cilium.\n- Learn more about [networking in AKS](https://learn.microsoft.com/azure/aks/concepts-network).\n\n> [!div class=\"nextstepaction\"]\n> [Learn more about configuring network policies in AKS](https://learn.microsoft.com/azure/aks/use-network-policies)\n",
    "metadata": {
      "word_count": 1800,
      "sections_created": [
        "Introduction",
        "Prerequisites",
        "Steps",
        "Verification",
        "Next Steps"
      ],
      "materials_used": [
        "./inputs/aks-prd-02.docx",
        "https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium"
      ],
      "key_topics_covered": [
        "Cilium",
        "Azure CNI",
        "CiliumEndpointSlices",
        "Network Policies",
        "AKS Networking",
        "Observability",
        "Best Practices"
      ]
    },
    "gap_report": []
  }
}