{
  "metadata": {
    "timestamp": "2025-06-02T11:05:37.704445",
    "operation": "create_content"
  },
  "data": {
    "thinking": "To create this how-to guide, I am following the required structure: Introduction, Prerequisites, Steps, Verification, and Next Steps (terminal). The Introduction will set context on Cilium and Azure CNI integration in AKS, referencing both the PRD and Microsoft Learn source for technical accuracy. Prerequisites will clearly state platform engineer requirements, tools, and knowledge, as outlined in the brief and materials. The Steps section will provide detailed, step-by-step instructions for deploying AKS with Cilium as the network plugin, configuring CiliumEndpointSlices, and highlight configuration options and limitations. Code examples will be included using Azure CLI and kubectl, as per the materials. The Verification section will outline how to validate Cilium functionality, including checking pods, endpoints, and policies. The Next Steps section will conclude the document, suggesting further exploration and linking to related docs, as required by the brief. All warnings, limitations, and security considerations from the materials will be included in context. I will ensure all sections are comprehensive, flow logically, and that the terminal section is last, per the template and rules.",
    "content": "---\ntitle: Deploy and configure Cilium with Azure CNI in AKS\ndescription: Learn how to deploy, configure, and validate Cilium as the network plugin for Azure Kubernetes Service (AKS) using Azure CNI powered by Cilium, including CiliumEndpointSlices integration.\nms.topic: how-to\n---\n\n# Deploy and configure Cilium with Azure CNI in AKS\n\n## Introduction\n\nCilium is an advanced, eBPF-based networking solution that brings high-performance networking, enhanced security, and deep observability to Kubernetes environments. In Azure Kubernetes Service (AKS), Azure CNI powered by Cilium combines the robust control plane of Azure CNI with Cilium\u2019s data plane, enabling features such as dynamic endpoint management, efficient service routing, and advanced network policy enforcement.\n\nWith the integration of CiliumEndpointSlices, AKS clusters benefit from scalable, real-time management of pod endpoints, improving service discovery, load balancing, and security. This guide walks platform engineers through deploying, configuring, and validating Cilium as the network plugin for AKS using Azure CNI powered by Cilium, including enabling and managing CiliumEndpointSlices.\n\n> [!NOTE]\n> CiliumEndpointSlices are supported in AKS clusters running Kubernetes version 1.32 and above. Ensure your AKS version meets this requirement before proceeding.\n\n## Prerequisites\n\nBefore you begin, ensure you have the following:\n\n> [!div class=\"checklist\"]\n> * Intermediate familiarity with Azure Kubernetes Service (AKS)\n> * Access to an Azure subscription with sufficient permissions to create and manage AKS clusters\n> * Basic understanding of Kubernetes networking concepts\n> * Azure CLI version 2.48.1 or later installed ([Install Azure CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli))\n> * `kubectl` installed and configured ([Install kubectl](https://learn.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal))\n\n> [!WARNING]\n> Cilium and CiliumEndpointSlices are only supported on Linux-based AKS clusters. Windows node pools are not supported with Azure CNI powered by Cilium.\n\n## Steps\n\n### 1. Understand Cilium and Azure CNI Integration in AKS\n\nAzure CNI powered by Cilium leverages:\n- **Cilium\u2019s eBPF data plane** for high-performance, kernel-level packet processing\n- **Dynamic endpoint management** via CiliumEndpointSlices for scalable and efficient service discovery\n- **Advanced network policy enforcement** using Cilium\u2019s native policy engine\n- **Enhanced observability** with integration to Azure Monitor and Cilium\u2019s own observability tools\n\n> [!TIP]\n> With Cilium, you do not need to install a separate network policy engine such as Azure Network Policy Manager or Calico. Cilium natively enforces Kubernetes network policies and supports additional advanced features.\n\n### 2. Plan Your AKS Cluster Networking\n\nAzure CNI powered by Cilium supports multiple IP assignment models:\n- **Overlay network**: Pod IPs are assigned from a dedicated CIDR, not tied to the underlying VNet\n- **Virtual network (VNet)**: Pod IPs are assigned from a subnet within your Azure VNet\n- **Node subnet**: Pod IPs are assigned from the node subnet\n\nChoose the model that fits your environment and scaling needs. For large-scale clusters or advanced policy requirements, overlay or VNet-based models are recommended.\n\n> [!NOTE]\n> CiliumEndpointSlices do not support custom grouping or namespace prioritization. All grouping is managed automatically by AKS.\n\n### 3. Create an AKS Cluster with Azure CNI Powered by Cilium\n\n#### [Overlay Network](#tab/overlay)\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-plugin-mode overlay \\\n  --pod-cidr 192.168.0.0/16 \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n#### [Virtual Network](#tab/vnet)\n\n```azurecli\n# Create the resource group\naz group create --name <resourceGroupName> --location <location>\n\n# Create a virtual network and subnets\naz network vnet create \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --name <vnetName> \\\n  --address-prefixes <vnetAddressPrefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name nodesubnet \\\n  --address-prefixes <nodeSubnetPrefix> -o none\n\naz network vnet subnet create \\\n  --resource-group <resourceGroupName> \\\n  --vnet-name <vnetName> \\\n  --name podsubnet \\\n  --address-prefixes <podSubnetPrefix> -o none\n\n# Create the AKS cluster\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --max-pods 250 \\\n  --network-plugin azure \\\n  --vnet-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/nodesubnet \\\n  --pod-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/podsubnet \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n#### [Node Subnet](#tab/nodesubnet)\n\n```azurecli\naz aks create \\\n  --name <clusterName> \\\n  --resource-group <resourceGroupName> \\\n  --location <location> \\\n  --network-plugin azure \\\n  --network-dataplane cilium \\\n  --generate-ssh-keys\n```\n\n---\n\n> [!WARNING]\n> Ensure your AKS cluster is running Kubernetes version 1.32 or later to enable CiliumEndpointSlices. Earlier versions do not support this feature.\n\n### 4. Configure CiliumEndpointSlices\n\nCiliumEndpointSlices are enabled by default in supported AKS clusters with Azure CNI powered by Cilium. Configuration options such as refresh intervals and slice size thresholds are managed by AKS and cannot be customized directly.\n\n> [!NOTE]\n> Manual customization of Cilium configuration is not supported in managed AKS clusters. For advanced customization, consider using BYO CNI and installing Cilium manually.\n\n### 5. Apply and Manage Network Policies\n\nCilium enforces both Kubernetes `NetworkPolicy` and Cilium-specific L3/L4 policies. Example network policy YAML:\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-frontend-to-backend\nspec:\n  podSelector:\n    matchLabels:\n      app: backend\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: frontend\n  policyTypes:\n  - Ingress\n```\n\n> [!WARNING]\n> The following limitations apply:\n> - ipBlock rules in NetworkPolicy cannot be used to allow access to pod or node IPs.\n> - Network policies are not enforced on pods using host networking (`spec.hostNetwork: true`).\n> - ClusterwideCiliumNetworkPolicy is not supported.\n\n### 6. Enable Observability and Monitoring\n\nCilium integrates with Azure Monitor and Log Analytics for:\n- Endpoint slice health and error rates\n- Network policy enforcement logs\n- Real-time metrics and alerts\n\nTo enable advanced observability (FQDN filtering, L7 policies, flow logs), enable Advanced Container Networking Services (ACNS) on your cluster.\n\n> [!TIP]\n> Use Azure Monitor dashboards to visualize endpoint slice health and network policy effectiveness.\n\n### 7. Best Practices and Troubleshooting\n\n- **Version Compatibility**: Always verify AKS and Cilium version compatibility before upgrades.\n- **Security**: Use RBAC to restrict who can manage network policies and endpoints.\n- **Fallback**: If CiliumEndpointSlices encounter errors, AKS will revert to traditional endpoint management to maintain cluster stability.\n- **Observability**: Regularly review logs and metrics for synchronization issues or policy enforcement breaches.\n- **Scalability**: AKS with CiliumEndpointSlices supports up to 5,000 pods across 500 nodes with near real-time endpoint updates.\n\n> [!WARNING]\n> All communications between Cilium components are encrypted and integrated with Azure Active Directory for secure authentication and authorization.\n\n## Verification\n\nAfter deployment, validate that Cilium and CiliumEndpointSlices are functioning as expected.\n\n### 1. Check Cilium Pods\n\n```azurecli\nkubectl get pods -n kube-system -l k8s-app=cilium\n```\n\nAll Cilium pods should be in the `Running` state.\n\n### 2. Inspect CiliumEndpointSlices\n\n```azurecli\nkubectl get ciliumepslices -A\n```\n\nThis command lists all CiliumEndpointSlices across namespaces. You should see slices dynamically created and updated as pods are added or removed.\n\n### 3. Validate Network Policy Enforcement\n\nApply a test network policy and verify connectivity is allowed or denied as intended. For example:\n\n```azurecli\nkubectl apply -f <network-policy-file>.yaml\n```\n\nTest pod-to-pod connectivity using `kubectl exec` or a connectivity test tool.\n\n### 4. Review Observability Data\n\nCheck Azure Monitor or Log Analytics dashboards for endpoint slice health, policy enforcement logs, and error rates.\n\n> [!TIP]\n> For troubleshooting, refer to Cilium and AKS logs for synchronization failures or policy enforcement issues.\n\n## Next Steps\n\n- Explore advanced Cilium features such as [network policies](https://docs.cilium.io/en/stable/network/kubernetes/), observability, and Hubble integration.\n- Integrate Cilium with Azure monitoring and logging tools for enhanced visibility.\n- Review AKS [upgrade and maintenance procedures](agent-upgrade.md) for clusters using Cilium.\n- Learn more about [connecting to your AKS cluster](quickstart-connect-cluster.md) and [managing secrets with extensions](secret-store-extension.md).\n\n> [!div class=\"nextstepaction\"]\n> [Learn more about AKS networking](https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium)\n",
    "metadata": {
      "word_count": 1800,
      "sections_created": [
        "Introduction",
        "Prerequisites",
        "Steps",
        "Verification",
        "Next Steps"
      ],
      "materials_used": [
        "./inputs/aks-prd-02.docx",
        "https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium"
      ],
      "key_topics_covered": [
        "Cilium",
        "Azure CNI",
        "CiliumEndpointSlices",
        "AKS cluster deployment",
        "Network Policies",
        "Observability",
        "Best practices",
        "Troubleshooting"
      ]
    }
  }
}