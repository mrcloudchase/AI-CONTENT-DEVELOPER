{
  "data": {
    "content": "### Control plane\n\nThe platform team models the multi-cluster environment in the control plane. It's designed to be human-oriented and easy to understand, update, and review. The control plane operates with abstractions such as Cluster Types, Environments, Workloads, Scheduling Policies, Configs and Templates. These abstractions are handled by an automated process that assigns deployment targets and configuration values to the cluster types, then saves the result to the platform GitOps repository. Although there may be thousands of physical clusters, the platform repository operates at a higher level, grouping the clusters into cluster types.\n\nThe main requirement for the control plane storage is to provide a reliable and secure transaction processing functionality, rather than being hit with complex queries against a large amount of data. Various technologies may be used to store the control plane data.\n\nThis architecture design suggests a Git repository with a set of pipelines to store and promote platform abstractions across environments. This design provides a few benefits:\n\n* All advantages of GitOps principles, such as version control, change approvals, automation, pull-based reconciliation. \n* Git repositories such as GitHub provide out of the box branching, security and PR review functionality.\n* Easy implementation of the promotional flows with GitHub Actions Workflows or similar orchestrators.\n* No need to maintain and expose a separate control plane service.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "heading_path": [
      "Workload management in a multi-cluster environment with GitOps",
      "Solution architecture",
      "Control plane"
    ],
    "section_level": 3,
    "chunk_index": 8,
    "frontmatter": {
      "title": "Workload management in a multi-cluster environment with GitOps",
      "description": "This article provides a conceptual overview of the workload management in a multi-cluster environment with GitOps.",
      "ms.date": "03/29/2023",
      "ms.topic": "concept-article",
      "author": "eedorenko",
      "ms.author": "iefedore"
    },
    "embedding_content": "Document: Workload management in a multi-cluster environment with GitOps | Topic: concept-article | Description: This article provides a conceptual overview of the workload management in a multi-cluster environmen | Section: Workload management in a multi-cluster environment with GitOps > Solution architecture > Control plane | ### Control plane\n\nThe platform team models the multi-cluster environment in the control plane. It's designed to be human-oriented and easy to understand, update, and review. The control plane operates with abstractions such as Cluster Types, Environments, Workloads, Scheduling Policies, Configs and Templates. These abstractions are handled by an automated process that assigns deployment targets and configuration values to the cluster types, then saves the result to the platform GitOps repository. Although there may be thousands of physical clusters, the platform repository operates at a higher level, grouping the clusters into cluster types.\n\nThe main requirement for the control plane storage is to provide a reliable and secure transaction processing functionality, rather than being hit with complex queries against a large amount of data. Various technologies may be used to store the control plane data.\n\nThis architecture design suggests a Git repository with a set of pipelines to store and promote platform abstractions across environments. This design provides a few benefits:\n\n* All advantages of GitOps principles, such as version control, change approvals, automation, pull-based reconciliation. \n* Git repositories such as GitHub provide out of the box branching, security and PR review functionality.\n* Easy implementation of the promotional flows with GitHub Actions Workflows or similar orchestrators.\n* No need to maintain and expose a separate control plane service.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "51f207b7070cdac2165be01fd109d93d42dc0e85b1f9db48504280b868cc5a6f",
    "file_id": "68b84d3ed0d9d36d4ec56ccb018594e09d36629cea891036b7b04a8fba544e6e",
    "chunk_id": "c6cbdf70cc68b88524f44e6f66c43930e1051f4e0b10ee72b64d2328b7cc3184",
    "prev_chunk_id": "0387250d256f07197fce49338daace01ec76471a2700417dd969a339cba484f4",
    "next_chunk_id": "db0a8eb0cf69d7f76f8c728c9ab04ba651394700d09da87d7d7ca2f86071a485",
    "parent_heading_chunk_id": "57fb9dec7e7eb4fd29ccd39cfbb36509166926f31cbe905690418269fa199579",
    "total_chunks_in_file": 31
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "section": [
      "Workload management in a multi-cluster environment with GitOps",
      "Solution architecture",
      "Control plane"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.652926"
}