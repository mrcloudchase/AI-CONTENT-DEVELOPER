{
  "data": {
    "content": "### Built-in roles\n\nThe following built-in roles provide access to perform common tasks on Kubernetes clusters. These roles can be granted to Microsoft Entra ID users, groups, or service principals.\n\n| Role | Description |\n|---|---|\n| [Azure Arc Kubernetes Viewer](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-viewer) | Allows read-only access to see most objects in a namespace. This role doesn't allow viewing secrets, because `read` permission on secrets would enable access to `ServiceAccount` credentials in the namespace. These credentials would in turn allow API access through that `ServiceAccount` value (a form of privilege escalation). |\n| [Azure Arc Kubernetes Writer](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-writer) | Allows read/write access to most objects in a namespace. This role doesn't allow viewing or modifying roles or role bindings. However, this role allows accessing secrets and running pods as any `ServiceAccount` value in the namespace, so it can be used to gain the API access levels of any `ServiceAccount` value in the namespace. |\n| [Azure Arc Kubernetes Admin](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-admin) | Allows admin access. This role is often granted within a namespace through [the `RoleBinding` object](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding). If you use it in `RoleBinding`, it allows read/write access to most resources in a namespace, including the ability to create roles and role bindings within the namespace. However, this role doesn't allow write access to resource quota or to the namespace itself. |\n| [Azure Arc Kubernetes Cluster Admin](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-cluster-admin) | Allows the ability to execute any action on any resource within the granted scope. When you use it in [`ClusterRoleBinding`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding), it allows full control over every resource in the cluster and in all namespaces. When you use it in [`RoleBinding`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding), it allows full control over every resource in the role binding's namespace, including the namespace itself.|\n\nYou can create built-in role assignments scoped to the cluster by using either the Azure portal or the Azure CLI. However, only Azure CLI can be used to create role assignments scoped to namespaces.\n\nTo create role assignments scoped to the Azure Arc-enabled Kubernetes cluster in the Azure portal, navigate to the cluster and then select **Access Control (IAM)** from the service menu.\n\nTo create role assignments by using Azure CLI, use the following command:\n\n```azurecli\naz role assignment create --role \"Azure Arc Kubernetes Cluster Admin\" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID\n```",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/azure-rbac.md",
    "heading_path": [
      "Use Azure RBAC on Azure Arc-enabled Kubernetes clusters",
      "Create role assignments for users to access the cluster",
      "Built-in roles"
    ],
    "section_level": 3,
    "chunk_index": 6,
    "frontmatter": {
      "title": "Azure RBAC on Azure Arc-enabled Kubernetes clusters",
      "ms.date": "02/25/2025",
      "ms.topic": "how-to",
      "ms.custom": "devx-track-azurecli",
      "description": "Use Azure RBAC for authorization checks on Azure Arc-enabled Kubernetes clusters."
    },
    "embedding_content": "Document: Azure RBAC on Azure Arc-enabled Kubernetes clusters | Topic: how-to | Description: Use Azure RBAC for authorization checks on Azure Arc-enabled Kubernetes clusters. | Section: Use Azure RBAC on Azure Arc-enabled Kubernetes clusters > Create role assignments for users to access the cluster > Built-in roles | ### Built-in roles\n\nThe following built-in roles provide access to perform common tasks on Kubernetes clusters. These roles can be granted to Microsoft Entra ID users, groups, or service principals.\n\n| Role | Description |\n|---|---|\n| [Azure Arc Kubernetes Viewer](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-viewer) | Allows read-only access to see most objects in a namespace. This role doesn't allow viewing secrets, because `read` permission on secrets would enable access to `ServiceAccount` credentials in the namespace. These credentials would in turn allow API access through that `ServiceAccount` value (a form of privilege escalation). |\n| [Azure Arc Kubernetes Writer](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-writer) | Allows read/write access to most objects in a namespace. This role doesn't allow viewing or modifying roles or role bindings. However, this role allows accessing secrets and running pods as any `ServiceAccount` value in the namespace, so it can be used to gain the API access levels of any `ServiceAccount` value in the namespace. |\n| [Azure Arc Kubernetes Admin](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-admin) | Allows admin access. This role is often granted within a namespace through [the `RoleBinding` object](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding). If you use it in `RoleBinding`, it allows read/write access to most resources in a namespace, including the ability to create roles and role bindings within the namespace. However, this role doesn't allow write access to resource quota or to the namespace itself. |\n| [Azure Arc Kubernetes Cluster Admin](/azure/role-based-access-control/built-in-roles#azure-arc-kubernetes-cluster-admin) | Allows the ability to execute any action on any resource within the granted scope. When you use it in [`ClusterRoleBinding`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding), it allows full control over every resource in the cluster and in all namespaces. When you use it in [`RoleBinding`](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#rolebinding-and-clusterrolebinding), it allows full control over every resource in the role binding's namespace, including the namespace itself.|\n\nYou can create built-in role assignments scoped to the cluster by using either the Azure portal or the Azure CLI. However, only Azure CLI can be used to create role assignments scoped to namespaces.\n\nTo create role assignments scoped to the Azure Arc-enabled Kubernetes cluster in the Azure portal, navigate to the cluster and then select **Access Control (IAM)** from the service menu.\n\nTo create role assignments by using Azure CLI, use the following command:\n\n```azurecli\naz role assignment create --role \"Azure Arc Kubernetes Cluster Admin\" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID\n```",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "ab7872bb8ff1ba2b75bc85c147a94b5e1d216fb02d314256c8dd538b1afbbc49",
    "file_id": "3e8ed022d954361887bcaeb5266dfc135ba567b5c7d7df942f9288c9158f0b00",
    "chunk_id": "a4d6e35114444cf6ef892075f63a3a4a7258ab0861b514b970c0d90cbe5c0c94",
    "prev_chunk_id": "85801cfeb977c85523f5fdf1fe2dcef72620d6151d500ed591f230baf38ce2ff",
    "next_chunk_id": "59c5db5dfcf0e9ac5bf134044308f847a3c004d36fbb6a119b87817395609ee2",
    "parent_heading_chunk_id": "7f54b8c3b12a8d2441a5968c4dbef7e39bc5963735403a16f5438bc0ef1d2d5a",
    "total_chunks_in_file": 19
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/azure-rbac.md",
    "section": [
      "Use Azure RBAC on Azure Arc-enabled Kubernetes clusters",
      "Create role assignments for users to access the cluster",
      "Built-in roles"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.652309"
}