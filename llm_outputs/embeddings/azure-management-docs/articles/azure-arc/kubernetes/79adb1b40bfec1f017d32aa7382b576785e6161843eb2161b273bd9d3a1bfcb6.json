{
  "data": {
    "content": "### Promote application to Stage\n\nOnce you approve and merge the PR to the `Platform GitOps` repository, the `drone` and `large` AKS clusters that represent corresponding cluster types start fetching the assignment manifests. The `drone` cluster has [GitOps extension](conceptual-gitops-flux2.md) installed, pointing to the `Platform GitOps` repository. It reports its `compliance` status to Azure Resource Graph: \n\n:::image type=\"content\" source=\"media/workload-management/drone-compliance-state.png\" alt-text=\"Screenshot showing compliance state details for the drone cluster.\":::\n\nThe PR merging event starts a GitHub workflow `checkpromote` in the `control plane` repository. This workflow waits until all clusters with the [GitOps extension](conceptual-gitops-flux2.md) installed that are looking at the `dev` branch in the `Platform GitOps` repository are compliant with the PR commit. In this example, the only such cluster is `drone`.\n\n:::image type=\"content\" source=\"media/workload-management/checkpromote-to-dev.png\" alt-text=\"Screenshot showing promotion to dev.\":::\n\nOnce the `checkpromote` is successful, it starts the `cd` workflow that promotes the change (application registration) to the `Stage` environment. For better visibility, it also updates the git commit status in the `control plane` repository:\n\n:::image type=\"content\" source=\"media/workload-management/dev-git-commit-status.png\" alt-text=\"Screenshot showing git commit status deploying to dev.\":::\n\n> [!NOTE]\n> If the `drone` cluster fails to reconcile the assignment manifests for any reason, the promotion flow will fail. The commit status will be marked as failed, and the application registration will not be promoted to the `Stage` environment.\n\nNext, configure a scheduling policy for the `uat-test` deployment target in the stage environment:  \n\n```bash",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Create a scheduling policy for the performance-test deployment target",
      "Understand deployment target assignment manifests",
      "Promote application to Stage"
    ],
    "section_level": 3,
    "chunk_index": 13,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Create a scheduling policy for the performance-test deployment target > Understand deployment target assignment manifests > Promote application to Stage | ### Promote application to Stage\n\nOnce you approve and merge the PR to the `Platform GitOps` repository, the `drone` and `large` AKS clusters that represent corresponding cluster types start fetching the assignment manifests. The `drone` cluster has [GitOps extension](conceptual-gitops-flux2.md) installed, pointing to the `Platform GitOps` repository. It reports its `compliance` status to Azure Resource Graph: \n\n:::image type=\"content\" source=\"media/workload-management/drone-compliance-state.png\" alt-text=\"Screenshot showing compliance state details for the drone cluster.\":::\n\nThe PR merging event starts a GitHub workflow `checkpromote` in the `control plane` repository. This workflow waits until all clusters with the [GitOps extension](conceptual-gitops-flux2.md) installed that are looking at the `dev` branch in the `Platform GitOps` repository are compliant with the PR commit. In this example, the only such cluster is `drone`.\n\n:::image type=\"content\" source=\"media/workload-management/checkpromote-to-dev.png\" alt-text=\"Screenshot showing promotion to dev.\":::\n\nOnce the `checkpromote` is successful, it starts the `cd` workflow that promotes the change (application registration) to the `Stage` environment. For better visibility, it also updates the git commit status in the `control plane` repository:\n\n:::image type=\"content\" source=\"media/workload-management/dev-git-commit-status.png\" alt-text=\"Screenshot showing git commit status deploying to dev.\":::\n\n> [!NOTE]\n> If the `drone` cluster fails to reconcile the assignment manifests for any reason, the promotion flow will fail. The commit status will be marked as failed, and the application registration will not be promoted to the `Stage` environment.\n\nNext, configure a scheduling policy for the `uat-test` deployment target in the stage environment:  \n\n```bash",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "38a913596fcf93ad38b5dd241bd483638e5a385e43b1f887602d3e3b3031f23f",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "79adb1b40bfec1f017d32aa7382b576785e6161843eb2161b273bd9d3a1bfcb6",
    "prev_chunk_id": "b40b543a2dd7a68fe37f14126fc97a2d926aa1cfbe332779320ccbf0a26b054c",
    "next_chunk_id": "f7ddc8eb2a65dcdae8b62969f52a0c9fa56c372ca7a6ac5e9a754f6a31f464b1",
    "parent_heading_chunk_id": "971ab7476be751cf9e93a0d6d27d216373508adafc4950e096316db52c8ae7a3",
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Create a scheduling policy for the performance-test deployment target",
      "Understand deployment target assignment manifests",
      "Promote application to Stage"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.544247"
}