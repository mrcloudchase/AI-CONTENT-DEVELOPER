{
  "data": {
    "content": "# Tutorial: Deploy applications using GitOps with Flux v2\n\nThis tutorial describes how to use GitOps in a Kubernetes cluster. GitOps with Flux v2 is enabled as a [cluster extension](conceptual-extensions.md) in Azure Arc-enabled Kubernetes clusters or Azure Kubernetes Service (AKS) clusters. After the `microsoft.flux` cluster extension is installed, you can create one or more `fluxConfigurations` resources that sync your Git repository sources to the cluster and reconcile the cluster to the desired state. With GitOps, you can use your Git repository as the source of truth for cluster configuration and application deployment.\n\nIn this tutorial, we use an example GitOps configuration with two [kustomizations](gitops-flux2-parameters.md#kustomization), so that you can see how one kustomization can have a dependency on another. You can add more kustomizations and dependencies as needed, depending on your scenario.\n\nBefore you dive in, take a moment to [learn how GitOps with Flux works conceptually](./conceptual-gitops-flux2.md).\n\n> [!TIP]\n> While the source in this tutorial is a Git repository, Flux also provides support for other common file sources such as Helm repositories, Buckets, and Azure Blob Storage.\n>\n> You can also create Flux configurations by using Bicep, ARM templates, or Terraform AzAPI provider. For more information, see [Microsoft.KubernetesConfiguration fluxConfigurations](/azure/templates/microsoft.kubernetesconfiguration/fluxconfigurations).\n\nConsider alternatively trying out using the new [Microsoft GitOps ArgoCD extension](tutorial-use-gitops-argocd.md). Argo CD is a popular open-source GitOps tool that provides a different set of features and capabilities compared to Flux v2.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "heading_path": [
      "Tutorial: Deploy applications using GitOps with Flux v2"
    ],
    "section_level": 1,
    "chunk_index": 0,
    "frontmatter": {
      "title": "Tutorial: Deploy applications using GitOps with Flux v2",
      "description": "This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deployment in Azure Arc and AKS clusters.",
      "ms.date": "03/26/2025",
      "ms.topic": "tutorial",
      "ms.custom": "template-tutorial, devx-track-azurecli, references_regions"
    },
    "embedding_content": "Document: Tutorial: Deploy applications using GitOps with Flux v2 | Topic: tutorial | Description: This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deploymen | Section: Tutorial: Deploy applications using GitOps with Flux v2 | # Tutorial: Deploy applications using GitOps with Flux v2\n\nThis tutorial describes how to use GitOps in a Kubernetes cluster. GitOps with Flux v2 is enabled as a [cluster extension](conceptual-extensions.md) in Azure Arc-enabled Kubernetes clusters or Azure Kubernetes Service (AKS) clusters. After the `microsoft.flux` cluster extension is installed, you can create one or more `fluxConfigurations` resources that sync your Git repository sources to the cluster and reconcile the cluster to the desired state. With GitOps, you can use your Git repository as the source of truth for cluster configuration and application deployment.\n\nIn this tutorial, we use an example GitOps configuration with two [kustomizations](gitops-flux2-parameters.md#kustomization), so that you can see how one kustomization can have a dependency on another. You can add more kustomizations and dependencies as needed, depending on your scenario.\n\nBefore you dive in, take a moment to [learn how GitOps with Flux works conceptually](./conceptual-gitops-flux2.md).\n\n> [!TIP]\n> While the source in this tutorial is a Git repository, Flux also provides support for other common file sources such as Helm repositories, Buckets, and Azure Blob Storage.\n>\n> You can also create Flux configurations by using Bicep, ARM templates, or Terraform AzAPI provider. For more information, see [Microsoft.KubernetesConfiguration fluxConfigurations](/azure/templates/microsoft.kubernetesconfiguration/fluxconfigurations).\n\nConsider alternatively trying out using the new [Microsoft GitOps ArgoCD extension](tutorial-use-gitops-argocd.md). Argo CD is a popular open-source GitOps tool that provides a different set of features and capabilities compared to Flux v2.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "7814268a06d29d289a54f0ba89ee226dc2fed69bfe2fd3a5f4cc2162e12c571c",
    "file_id": "e86c9f8524b4e2887fafe4602021952640d48b815217386227741e43a048021a",
    "chunk_id": "a107ed00f8aa0d1f345883103bedb85bb3b1469c87d5990aa51de95f0297877e",
    "prev_chunk_id": null,
    "next_chunk_id": "f5a4064b56780b939ebd521b93e3fcd1e98dc466d682d7127b7b1af41c19bba4",
    "parent_heading_chunk_id": null,
    "total_chunks_in_file": 51
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "section": [
      "Tutorial: Deploy applications using GitOps with Flux v2"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.526861"
}