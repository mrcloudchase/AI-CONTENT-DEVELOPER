{
  "data": {
    "content": "#### CD pipeline\n\nDuring the initial CD pipeline run, you need to give the pipeline access to the GitOps repository. Select **View** when prompted that the pipeline needs permission to access a resource. Then, select **Permit** to grant permission to use the GitOps repository for the current and future runs of the pipeline.\n\nThe successful CI pipeline run triggers the CD pipeline to complete the deployment process. You deploy to each environment incrementally.\n\n> [!TIP]\n> If the CD pipeline does not automatically trigger:\n>\n> 1. Verify the name matches the branch trigger in [`.pipelines/az-vote-cd-pipeline.yaml`](https://github.com/Azure/arc-cicd-demo-src/blob/master/.pipelines/az-vote-cd-pipeline.yaml)\n>    * It should be `arc-cicd-demo-src CI`.\n> 1. Rerun the CI pipeline.\n\nOnce the template and manifest changes to the GitOps repository are generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.\n\n1. Find the PR created by the pipeline to the GitOps repository.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.\n1. If everything looks good, approve and complete the PR.\n1. After a few minutes, Flux picks up the change and starts the deployment.\n1. Monitor the `git commit` status on the **Commit history** tab. Once it is `succeeded`, the CD pipeline starts automated testing.\n1. Forward the port locally using `kubectl` and ensure the app works correctly using:\n\n    ```console\n   kubectl port-forward -n dev svc/azure-vote-front 8080:80\n    ```\n\n1. View the Azure Vote app in your browser at `http://localhost:8080/`.\n1. Vote for your favorites and get ready to make some changes to the app.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "heading_path": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "Deploy the dev environment for the first time",
      "CD pipeline"
    ],
    "section_level": 4,
    "chunk_index": 19,
    "frontmatter": {
      "title": "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "description": "This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled Kubernetes or Azure Kubernetes Service clusters.",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "tutorial",
      "ms.date": "01/15/2025",
      "ms.custom": "template-tutorial, devx-track-azurecli"
    },
    "embedding_content": "Document: Tutorial: Implement CI/CD with GitOps (Flux v2) | Topic: tutorial | Description: This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled  | Section: Tutorial: Implement CI/CD with GitOps (Flux v2) > Implement CI/CD with Azure DevOps > Deploy the dev environment for the first time > CD pipeline | #### CD pipeline\n\nDuring the initial CD pipeline run, you need to give the pipeline access to the GitOps repository. Select **View** when prompted that the pipeline needs permission to access a resource. Then, select **Permit** to grant permission to use the GitOps repository for the current and future runs of the pipeline.\n\nThe successful CI pipeline run triggers the CD pipeline to complete the deployment process. You deploy to each environment incrementally.\n\n> [!TIP]\n> If the CD pipeline does not automatically trigger:\n>\n> 1. Verify the name matches the branch trigger in [`.pipelines/az-vote-cd-pipeline.yaml`](https://github.com/Azure/arc-cicd-demo-src/blob/master/.pipelines/az-vote-cd-pipeline.yaml)\n>    * It should be `arc-cicd-demo-src CI`.\n> 1. Rerun the CI pipeline.\n\nOnce the template and manifest changes to the GitOps repository are generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.\n\n1. Find the PR created by the pipeline to the GitOps repository.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.\n1. If everything looks good, approve and complete the PR.\n1. After a few minutes, Flux picks up the change and starts the deployment.\n1. Monitor the `git commit` status on the **Commit history** tab. Once it is `succeeded`, the CD pipeline starts automated testing.\n1. Forward the port locally using `kubectl` and ensure the app works correctly using:\n\n    ```console\n   kubectl port-forward -n dev svc/azure-vote-front 8080:80\n    ```\n\n1. View the Azure Vote app in your browser at `http://localhost:8080/`.\n1. Vote for your favorites and get ready to make some changes to the app.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "72d2ba9042915e8674b5bd26131ce859ec46193c6cf07a29db58d4459cc39acb",
    "file_id": "4d1229b6dc50d3a990ffdf3b851b5e2741d36a02a95ab6b0d3b14c5df8fd629c",
    "chunk_id": "8298655d411829533e89d40a66e3a260bd8d967c0f24042250e90b9458c595b1",
    "prev_chunk_id": "565de9bd042a5bd5dd4134f90f8771cad386cb5101bf88397a0e5a7a42dd9dd6",
    "next_chunk_id": "cd23117814649dcbcf42d1a4a60e0683152ed18c91c388316484646a11e52d4d",
    "parent_heading_chunk_id": "4e8407cdf025077cd007ef14d2dd5f18464bab3f05d014502a228f3c01743e0c",
    "total_chunks_in_file": 35
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "section": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "Deploy the dev environment for the first time",
      "CD pipeline"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:35.948962"
}