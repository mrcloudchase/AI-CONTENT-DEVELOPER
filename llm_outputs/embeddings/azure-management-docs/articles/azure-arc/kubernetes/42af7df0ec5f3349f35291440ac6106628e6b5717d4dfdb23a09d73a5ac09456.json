{
  "data": {
    "content": "## Example inner loop workflow built with DevSpace framework\n\nTo illustrate the inner loop workflow, we can look at an example scenario. This example uses the DevSpace framework, but the same general workflow can be used with other frameworks.\n\nThis diagram shows the workflow for the inner loop.\n\n:::image type=\"content\" source=\"media/dev-inner-loop.png\" alt-text=\"Diagram showing the inner loop flow.\" lightbox=\"media/dev-inner-loop.png\":::\n\nThis diagram shows the workflow for the inner loop to outer loop transition.\n\n:::image type=\"content\" source=\"media/inner-loop-to-outer-loop.png\" alt-text=\"Diagram showing inner loop to outer loop transition.\" lightbox=\"media/inner-loop-to-outer-loop.png\":::\n\nIn this example, our application developer:\n\n- Authors a devspace.yaml file to configure the inner loop.\n- Writes and tests application code using the inner loop for efficiency.\n- Deploys to staging or prod with outer loop.\n\nTo update, run, and debug the application, either in a local or remote cluster, the application developer takes the following steps:\n\n1. Updates the local configuration for the development environment represented in .env file.\n1. Runs `devspace use context` and selects the Kubernetes cluster context.\n1. Selects a namespace to work with by running `devspace use namespace <namespace_name>`.\n1. Iterates changes to the application code, and deploys and debugs the application onto the target cluster by running `devspace dev`.\n1. Runs `devspace dev` to generate low-level manifests based on the local configuration, and deploys the application. These low-level manifests are configured with DevSpace hooks in devspace.yaml.\n\n   - Since DevSpace enables hot reloading, using file sync to copy the latest changes inside the container, the container doesn't have to be rebuilt for each code change.\n   - Running `devspace dev` also deploys any dependencies configured in devspace.yaml, such as back-end dependencies to front-end.\n\n1. Tests the changes by accessing the application through the forwarding configured through devspace.yaml.\n1. After finalizing the changes, purges the deployment by running `devspace purge` and creating a new pull request to merge the changes to the dev branch of the application repository.\n\n> [!NOTE]\n> Find the sample code for this workflow in our [GitHub repo](https://github.com/Azure/arc-cicd-demo-src).",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-inner-loop-gitops.md",
    "heading_path": [
      "Inner loop developer experience for teams adopting GitOps",
      "Example inner loop workflow built with DevSpace framework"
    ],
    "section_level": 2,
    "chunk_index": 3,
    "frontmatter": {
      "title": "Inner loop developer experience for teams adopting GitOps",
      "ms.date": "01/23/2025",
      "ms.topic": "concept-article",
      "description": "Learn how an established inner loop can enhance developer productivity and help in a seamless transition for teams adopting GitOps."
    },
    "embedding_content": "Document: Inner loop developer experience for teams adopting GitOps | Topic: concept-article | Description: Learn how an established inner loop can enhance developer productivity and help in a seamless transi | Section: Inner loop developer experience for teams adopting GitOps > Example inner loop workflow built with DevSpace framework | ## Example inner loop workflow built with DevSpace framework\n\nTo illustrate the inner loop workflow, we can look at an example scenario. This example uses the DevSpace framework, but the same general workflow can be used with other frameworks.\n\nThis diagram shows the workflow for the inner loop.\n\n:::image type=\"content\" source=\"media/dev-inner-loop.png\" alt-text=\"Diagram showing the inner loop flow.\" lightbox=\"media/dev-inner-loop.png\":::\n\nThis diagram shows the workflow for the inner loop to outer loop transition.\n\n:::image type=\"content\" source=\"media/inner-loop-to-outer-loop.png\" alt-text=\"Diagram showing inner loop to outer loop transition.\" lightbox=\"media/inner-loop-to-outer-loop.png\":::\n\nIn this example, our application developer:\n\n- Authors a devspace.yaml file to configure the inner loop.\n- Writes and tests application code using the inner loop for efficiency.\n- Deploys to staging or prod with outer loop.\n\nTo update, run, and debug the application, either in a local or remote cluster, the application developer takes the following steps:\n\n1. Updates the local configuration for the development environment represented in .env file.\n1. Runs `devspace use context` and selects the Kubernetes cluster context.\n1. Selects a namespace to work with by running `devspace use namespace <namespace_name>`.\n1. Iterates changes to the application code, and deploys and debugs the application onto the target cluster by running `devspace dev`.\n1. Runs `devspace dev` to generate low-level manifests based on the local configuration, and deploys the application. These low-level manifests are configured with DevSpace hooks in devspace.yaml.\n\n   - Since DevSpace enables hot reloading, using file sync to copy the latest changes inside the container, the container doesn't have to be rebuilt for each code change.\n   - Running `devspace dev` also deploys any dependencies configured in devspace.yaml, such as back-end dependencies to front-end.\n\n1. Tests the changes by accessing the application through the forwarding configured through devspace.yaml.\n1. After finalizing the changes, purges the deployment by running `devspace purge` and creating a new pull request to merge the changes to the dev branch of the application repository.\n\n> [!NOTE]\n> Find the sample code for this workflow in our [GitHub repo](https://github.com/Azure/arc-cicd-demo-src).",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "e96de58ca2280dd7206be57a676bd35d504466e812cf028b659c3961eb520854",
    "file_id": "6416b4886a89963d19e6ac150f43526dc689438a00ff9aa45a7e6cb9a88631e3",
    "chunk_id": "42af7df0ec5f3349f35291440ac6106628e6b5717d4dfdb23a09d73a5ac09456",
    "prev_chunk_id": "9bb1db3e9f91f21262553975c4cb43ec8e9c928cb6d0cd13fe487a7f9ed534d6",
    "next_chunk_id": "6b133ac637a0fd9350ce222b84920f5451251f12c74e263998c7c096c18ac2d6",
    "parent_heading_chunk_id": "fa42c2ac4bd5244c2a82ea4fc178e28b76de2de0b3f7f6041395c9bda658ef48",
    "total_chunks_in_file": 5
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-inner-loop-gitops.md",
    "section": [
      "Inner loop developer experience for teams adopting GitOps",
      "Example inner loop workflow built with DevSpace framework"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.976450"
}