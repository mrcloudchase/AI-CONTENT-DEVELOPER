{
  "data": {
    "content": "#### CI/CD Dev workflow\n\nTo start the CI/CD Dev workflow, change the source code. In the application repository, update values in `.azure-vote/src/azure-vote-front/config_file.cfg` file and push the changes to the repository.\n\nThe CI/CD Dev workflow:\n\n* Ensures the application change passes all automated quality checks for deployment.\n* Does any extra validation that couldn't be completed in the PR pipeline.\n* Verifies the Docker image has changed and the new image is pushed.\n* Publishes the artifacts (Docker image tags, Manifest templates, Utils) that are used by the following CD stages.\n* Deploys the application to Dev environment.\n  * Generates manifests to the GitOps repository.\n  * Creates a PR to the GitOps repository for approval.\n\nOnce these steps are completed:\n\n1. Find the PR created by the pipeline to the GitOps repository.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.\n1. If everything looks good, approve and complete the PR.\n1. After a few minutes, Flux picks up the change and starts the deployment.\n1. Monitor the `git commit` status on the Commit history tab. Once it is `succeeded`, the `CD Stage` workflow starts.\n1. Forward the port locally using `kubectl` and ensure the app works correctly using:\n\n    ```console\n   kubectl port-forward -n dev svc/azure-vote-front 8080:80\n    ```\n\n1. View the Azure Vote app in your browser at `http://localhost:8080/`.\n1. Vote for your favorites and get ready to make some changes to the app.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "heading_path": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with GitHub",
      "Create GitHub secrets",
      "CI/CD Dev workflow"
    ],
    "section_level": 4,
    "chunk_index": 31,
    "frontmatter": {
      "title": "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "description": "This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled Kubernetes or Azure Kubernetes Service clusters.",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "tutorial",
      "ms.date": "01/15/2025",
      "ms.custom": "template-tutorial, devx-track-azurecli"
    },
    "embedding_content": "Document: Tutorial: Implement CI/CD with GitOps (Flux v2) | Topic: tutorial | Description: This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled  | Section: Tutorial: Implement CI/CD with GitOps (Flux v2) > Implement CI/CD with GitHub > Create GitHub secrets > CI/CD Dev workflow | #### CI/CD Dev workflow\n\nTo start the CI/CD Dev workflow, change the source code. In the application repository, update values in `.azure-vote/src/azure-vote-front/config_file.cfg` file and push the changes to the repository.\n\nThe CI/CD Dev workflow:\n\n* Ensures the application change passes all automated quality checks for deployment.\n* Does any extra validation that couldn't be completed in the PR pipeline.\n* Verifies the Docker image has changed and the new image is pushed.\n* Publishes the artifacts (Docker image tags, Manifest templates, Utils) that are used by the following CD stages.\n* Deploys the application to Dev environment.\n  * Generates manifests to the GitOps repository.\n  * Creates a PR to the GitOps repository for approval.\n\nOnce these steps are completed:\n\n1. Find the PR created by the pipeline to the GitOps repository.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.\n1. If everything looks good, approve and complete the PR.\n1. After a few minutes, Flux picks up the change and starts the deployment.\n1. Monitor the `git commit` status on the Commit history tab. Once it is `succeeded`, the `CD Stage` workflow starts.\n1. Forward the port locally using `kubectl` and ensure the app works correctly using:\n\n    ```console\n   kubectl port-forward -n dev svc/azure-vote-front 8080:80\n    ```\n\n1. View the Azure Vote app in your browser at `http://localhost:8080/`.\n1. Vote for your favorites and get ready to make some changes to the app.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "b41578395ec0810c9e0d48bf0e40e3fccdef330bbcb4608f9c21ae3d66b3e3df",
    "file_id": "4d1229b6dc50d3a990ffdf3b851b5e2741d36a02a95ab6b0d3b14c5df8fd629c",
    "chunk_id": "38138062882dd63c9fa11094823f61fd83675f2b8354909a26a9218f3cd72b29",
    "prev_chunk_id": "f77cce67a96561744bf1f6b6abcc3b29cef3561d4c33e224dcf13b765993de82",
    "next_chunk_id": "5521a682432895b8b4425bad9221e57a4316896efc34385c34ac2c8431f0ba2f",
    "parent_heading_chunk_id": "faac73c099545c2693135bbd66848623a95e5006df4873ffee0f4ea1cc73ab3f",
    "total_chunks_in_file": 35
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "section": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with GitHub",
      "Create GitHub secrets",
      "CI/CD Dev workflow"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:36.071229"
}