{
  "data": {
    "content": "### Update manifests for multi-tenancy\n\nLet\u2019s say you deploy a `fluxConfiguration` to one of our Kubernetes clusters in the `cluster-config` namespace with cluster scope. You configure the source to sync the `https://github.com/fluxcd/flux2-kustomize-helm-example` repo. This is the same sample Git repo used in the [Deploy applications using GitOps with Flux v2 tutorial](tutorial-use-gitops-flux2.md).\n\nAfter Flux syncs the repo, it deploys the resources described in the manifests (YAML files). Two of the manifests describe `HelmRelease` and `HelmRepository` objects.\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: nginx\n  namespace: nginx\nspec:\n  releaseName: nginx-ingress-controller\n  chart:\n    spec:\n      chart: nginx-ingress-controller\n      sourceRef:\n        kind: HelmRepository\n        name: bitnami\n        namespace: flux-system\n      version: \"5.6.14\"\n  interval: 1h0m0s\n  install:\n    remediation:\n      retries: 3\n  # Default values\n  # https://github.com/bitnami/charts/blob/master/bitnami/nginx-ingress-controller/values.yaml\n  values:\n    service:\n      type: NodePort\n```\n\n```yaml\napiVersion: source.toolkit.fluxcd.io/v1beta1\nkind: HelmRepository\nmetadata:\n  name: bitnami\n  namespace: flux-system\nspec:\n  interval: 30m\n  url: https://charts.bitnami.com/bitnami\n```\n\nBy default, the Flux extension deploys the `fluxConfigurations` by impersonating the `flux-applier` service account that is deployed only in the `cluster-config` namespace. Using the above manifests, when multi-tenancy is enabled, the `HelmRelease` would be blocked. This is because the `HelmRelease` is in the `nginx` namespace, but it references a HelmRepository in the `flux-system` namespace. Also, the Flux `helm-controller` can't apply the `HelmRelease`, because there is no `flux-applier` service account in the `nginx` namespace.\n\nTo work with multi-tenancy, the correct approach is to deploy all Flux objects into the same namespace as the `fluxConfigurations`. This approach avoids the cross-namespace reference issue, and allows the Flux controllers to get the permissions to apply the objects. Thus, for a GitOps configuration created in the `cluster-config` namespace, these example manifests would change as follows:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: nginx\n  namespace: cluster-config \nspec:\n  releaseName: nginx-ingress-controller\n  targetNamespace: nginx\n  chart:\n    spec:\n      chart: nginx-ingress-controller\n      sourceRef:\n        kind: HelmRepository\n        name: bitnami\n        namespace: cluster-config\n      version: \"5.6.14\"\n  interval: 1h0m0s\n  install:\n    remediation:\n      retries: 3\n  # Default values\n  # https://github.com/bitnami/charts/blob/master/bitnami/nginx-ingress-controller/values.yaml\n  values:\n    service:\n      type: NodePort\n```",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-gitops-flux2.md",
    "heading_path": [
      "Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes",
      "Multi-tenancy",
      "Update manifests for multi-tenancy"
    ],
    "section_level": 3,
    "chunk_index": 12,
    "frontmatter": {
      "title": "Application deployments with GitOps (Flux v2)",
      "description": "This article provides a conceptual overview of GitOps in Azure for use in Azure Arc-enabled Kubernetes and Azure Kubernetes Service (AKS) clusters.",
      "ms.date": "04/22/2025",
      "ms.topic": "concept-article",
      "ms.custom": "devx-track-azurecli, references-regions"
    },
    "embedding_content": "Document: Application deployments with GitOps (Flux v2) | Topic: concept-article | Description: This article provides a conceptual overview of GitOps in Azure for use in Azure Arc-enabled Kubernet | Section: Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes > Multi-tenancy > Update manifests for multi-tenancy | ### Update manifests for multi-tenancy\n\nLet\u2019s say you deploy a `fluxConfiguration` to one of our Kubernetes clusters in the `cluster-config` namespace with cluster scope. You configure the source to sync the `https://github.com/fluxcd/flux2-kustomize-helm-example` repo. This is the same sample Git repo used in the [Deploy applications using GitOps with Flux v2 tutorial](tutorial-use-gitops-flux2.md).\n\nAfter Flux syncs the repo, it deploys the resources described in the manifests (YAML files). Two of the manifests describe `HelmRelease` and `HelmRepository` objects.\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: nginx\n  namespace: nginx\nspec:\n  releaseName: nginx-ingress-controller\n  chart:\n    spec:\n      chart: nginx-ingress-controller\n      sourceRef:\n        kind: HelmRepository\n        name: bitnami\n        namespace: flux-system\n      version: \"5.6.14\"\n  interval: 1h0m0s\n  install:\n    remediation:\n      retries: 3\n  # Default values\n  # https://github.com/bitnami/charts/blob/master/bitnami/nginx-ingress-controller/values.yaml\n  values:\n    service:\n      type: NodePort\n```\n\n```yaml\napiVersion: source.toolkit.fluxcd.io/v1beta1\nkind: HelmRepository\nmetadata:\n  name: bitnami\n  namespace: flux-system\nspec:\n  interval: 30m\n  url: https://charts.bitnami.com/bitnami\n```\n\nBy default, the Flux extension deploys the `fluxConfigurations` by impersonating the `flux-applier` service account that is deployed only in the `cluster-config` namespace. Using the above manifests, when multi-tenancy is enabled, the `HelmRelease` would be blocked. This is because the `HelmRelease` is in the `nginx` namespace, but it references a HelmRepository in the `flux-system` namespace. Also, the Flux `helm-controller` can't apply the `HelmRelease`, because there is no `flux-applier` service account in the `nginx` namespace.\n\nTo work with multi-tenancy, the correct approach is to deploy all Flux objects into the same namespace as the `fluxConfigurations`. This approach avoids the cross-namespace reference issue, and allows the Flux controllers to get the permissions to apply the objects. Thus, for a GitOps configuration created in the `cluster-config` namespace, these example manifests would change as follows:\n\n```yaml\napiVersion: helm.toolkit.fluxcd.io/v2beta1\nkind: HelmRelease\nmetadata:\n  name: nginx\n  namespace: cluster-config \nspec:\n  releaseName: nginx-ingress-controller\n  targetNamespace: nginx\n  chart:\n    spec:\n      chart: nginx-ingress-controller\n      sourceRef:\n        kind: HelmRepository\n        name: bitnami\n        namespace: cluster-config\n      version: \"5.6.14\"\n  interval: 1h0m0s\n  install:\n    remediation:\n      retries: 3\n  # Default values\n  # https://github.com/bitnami/charts/blob/master/bitnami/nginx-ingress-controller/values.yaml\n  values:\n    service:\n      type: NodePort\n```",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "876f67b4ad8aa0bc7e56c426d2e550db0524d1a6da1d379dad245f63e7b6e6ff",
    "file_id": "d1c420fd47930a7e5bef901785bdb91b23493b1c6e1945a4a3b89a699dd87eb8",
    "chunk_id": "bed890ea414c7bc2733819df76e97610f1d7a3d7fc441010b6dcdb721c5b5171",
    "prev_chunk_id": "76b5c742500591c1da336a16a75a711dfa0f856eff7550533b23660ba89e9e63",
    "next_chunk_id": "f1db92079626548e6e17bcc21ab4cd24fa846605ea4cb95ca890d01aad7bbcf5",
    "parent_heading_chunk_id": "9103d81dbe133353eee1f09ab6be2da6fa20ffaa3473733113a6db2479da4456",
    "total_chunks_in_file": 20
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-gitops-flux2.md",
    "section": [
      "Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes",
      "Multi-tenancy",
      "Update manifests for multi-tenancy"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:34.661474"
}