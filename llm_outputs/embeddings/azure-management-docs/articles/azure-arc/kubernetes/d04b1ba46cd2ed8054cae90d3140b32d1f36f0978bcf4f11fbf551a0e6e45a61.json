{
  "data": {
    "content": "### PR validation pipeline\n\nThe PR pipeline is the first line of defense against a faulty change. Usual application code quality checks include linting and static analysis. From a GitOps perspective, you also need to assure the same quality for the resulting infrastructure to be deployed.\n\nThe application's Dockerfile and Helm charts can use linting in a similar way to the application.\n\nErrors found during linting range from incorrectly formatted YAML files, to best practice suggestions, such as setting CPU and Memory limits for your application.\n\n> [!NOTE]\n> To get the best coverage from Helm linting in a real application, substitute values that are reasonably similar to values that would be used in a real environment.\n\nErrors found during pipeline execution appear in the test results section of the run. From here, you can:\n\n* Track the useful statistics on the error types.\n* Find the first commit on which they were detected.\n* Stack trace style links to the code sections that caused the error.\n\nThe pipeline run finishes, confirming the quality of the application code and the template that deploys it. You can now approve and complete the PR. The CI runs again, regenerating the templates and manifests, before triggering the CD pipeline.\n\n> [!TIP]\n> In a real environment, be sure to set branch policies to ensure the PR passes your quality checks. For more information, see [Branch policies and settings](/azure/devops/repos/git/branch-policies).",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "heading_path": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "PR validation pipeline"
    ],
    "section_level": 3,
    "chunk_index": 22,
    "frontmatter": {
      "title": "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "description": "This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled Kubernetes or Azure Kubernetes Service clusters.",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "tutorial",
      "ms.date": "01/15/2025",
      "ms.custom": "template-tutorial, devx-track-azurecli"
    },
    "embedding_content": "Document: Tutorial: Implement CI/CD with GitOps (Flux v2) | Topic: tutorial | Description: This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled  | Section: Tutorial: Implement CI/CD with GitOps (Flux v2) > Implement CI/CD with Azure DevOps > PR validation pipeline | ### PR validation pipeline\n\nThe PR pipeline is the first line of defense against a faulty change. Usual application code quality checks include linting and static analysis. From a GitOps perspective, you also need to assure the same quality for the resulting infrastructure to be deployed.\n\nThe application's Dockerfile and Helm charts can use linting in a similar way to the application.\n\nErrors found during linting range from incorrectly formatted YAML files, to best practice suggestions, such as setting CPU and Memory limits for your application.\n\n> [!NOTE]\n> To get the best coverage from Helm linting in a real application, substitute values that are reasonably similar to values that would be used in a real environment.\n\nErrors found during pipeline execution appear in the test results section of the run. From here, you can:\n\n* Track the useful statistics on the error types.\n* Find the first commit on which they were detected.\n* Stack trace style links to the code sections that caused the error.\n\nThe pipeline run finishes, confirming the quality of the application code and the template that deploys it. You can now approve and complete the PR. The CI runs again, regenerating the templates and manifests, before triggering the CD pipeline.\n\n> [!TIP]\n> In a real environment, be sure to set branch policies to ensure the PR passes your quality checks. For more information, see [Branch policies and settings](/azure/devops/repos/git/branch-policies).",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "ee9502068eda6230ab5c26fcc63512b4f78c5ebbad372cf935f705c28d82f384",
    "file_id": "4d1229b6dc50d3a990ffdf3b851b5e2741d36a02a95ab6b0d3b14c5df8fd629c",
    "chunk_id": "d04b1ba46cd2ed8054cae90d3140b32d1f36f0978bcf4f11fbf551a0e6e45a61",
    "prev_chunk_id": "7a9e1f9bbd9ab904de8f8abceab01d044527d64d1b443a94d9ab9e5fba098254",
    "next_chunk_id": "13b2ed16f2e01101e94bd99ac33e7c53136826b67e50462eb190922e6e68a610",
    "parent_heading_chunk_id": "acbb58d677b190c111bc77fa91e51dfd959e8a6b02d52697a361a6d9f20a849c",
    "total_chunks_in_file": 35
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "section": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "PR validation pipeline"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:21.095862"
}