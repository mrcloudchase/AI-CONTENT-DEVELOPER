{
  "data": {
    "content": "## 3 - Application Dev Team: Build and deploy application\n\nThe Application Team regularly submits pull requests to the `main` branch in the `Application Source` repository. Once a PR is merged to `main`, it starts a CI/CD workflow. Here, the workflow will be started manually.\n\n Go to the `Application Source` repository in GitHub. On the `Actions` tab, select `Run workflow`.\n\n:::image type=\"content\" source=\"media/workload-management/run-workflow-button.png\" alt-text=\"Screenshot showing the Run workflow option.\":::\n\nThe workflow performs the following actions:\n\n- Builds the application Docker image and pushes it to the GitHub repository package.\n- Generates manifests for the `functional-test` and `performance-test` deployment targets. It uses configuration values from the `dev-configs` branch. The generated manifests are added to a pull request and auto-merged in the `dev` branch.\n- Generates manifests for the `uat-test` deployment target. It uses configuration values from the `stage-configs` branch. \n\n:::image type=\"content\" source=\"media/workload-management/cicd-workflow.png\" alt-text=\"Screenshot showing the CI/CD workflow.\" lightbox=\"media/workload-management/cicd-workflow.png\":::\n\nThe generated manifests are added to a pull request to the `stage` branch waiting for approval:\n\n:::image type=\"content\" source=\"media/workload-management/app-pr-to-stage.png\" alt-text=\"Screenshot showing a PR to stage.\":::\n\nTo test the application manually on the `Dev` environment before approving the PR to the `Stage` environment, first verify how the `functional-test` application instance works on the `drone` cluster:\n\n```bash\nkubectl port-forward svc/hello-world-service -n dev-drone-hello-world-app-functional-test 9090:9090 --context=drone",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Create a scheduling policy for the uat-test deployment target",
      "3 - Application Dev Team: Build and deploy application"
    ],
    "section_level": 2,
    "chunk_index": 16,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Create a scheduling policy for the uat-test deployment target > 3 - Application Dev Team: Build and deploy application | ## 3 - Application Dev Team: Build and deploy application\n\nThe Application Team regularly submits pull requests to the `main` branch in the `Application Source` repository. Once a PR is merged to `main`, it starts a CI/CD workflow. Here, the workflow will be started manually.\n\n Go to the `Application Source` repository in GitHub. On the `Actions` tab, select `Run workflow`.\n\n:::image type=\"content\" source=\"media/workload-management/run-workflow-button.png\" alt-text=\"Screenshot showing the Run workflow option.\":::\n\nThe workflow performs the following actions:\n\n- Builds the application Docker image and pushes it to the GitHub repository package.\n- Generates manifests for the `functional-test` and `performance-test` deployment targets. It uses configuration values from the `dev-configs` branch. The generated manifests are added to a pull request and auto-merged in the `dev` branch.\n- Generates manifests for the `uat-test` deployment target. It uses configuration values from the `stage-configs` branch. \n\n:::image type=\"content\" source=\"media/workload-management/cicd-workflow.png\" alt-text=\"Screenshot showing the CI/CD workflow.\" lightbox=\"media/workload-management/cicd-workflow.png\":::\n\nThe generated manifests are added to a pull request to the `stage` branch waiting for approval:\n\n:::image type=\"content\" source=\"media/workload-management/app-pr-to-stage.png\" alt-text=\"Screenshot showing a PR to stage.\":::\n\nTo test the application manually on the `Dev` environment before approving the PR to the `Stage` environment, first verify how the `functional-test` application instance works on the `drone` cluster:\n\n```bash\nkubectl port-forward svc/hello-world-service -n dev-drone-hello-world-app-functional-test 9090:9090 --context=drone",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "58251cfb2602cb526fa7b5923042cd518eaacbe58b4e234b6cfc05de11e76598",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "cae6c8eb6f41d5e09f4f39086ac12899eaf14baf4eb3cdad798738354b56c1c2",
    "prev_chunk_id": "a530c9d8064676de6a2931811244f4c2a2b27414127c6914621441b89a3d9781",
    "next_chunk_id": "4a2ef7ba9c06379e3ca4157d9ae39c355de29140eabc08c4bd35aa8720f9ffc4",
    "parent_heading_chunk_id": "492b6b56f98bc01e15375c7b9d883bb829ef0728b2a51021f78ea58b6cdfdf2a",
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Create a scheduling policy for the uat-test deployment target",
      "3 - Application Dev Team: Build and deploy application"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:34.192824"
}