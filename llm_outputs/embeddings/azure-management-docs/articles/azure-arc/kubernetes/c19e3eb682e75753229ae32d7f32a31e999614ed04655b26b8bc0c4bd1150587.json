{
  "data": {
    "content": "### [Arc-enabled Kubernetes](#tab/arc-k8s)\n\n> [!TIP]\n> The following steps are based on the [How-to guide](/azure/azure-arc/kubernetes/workload-identity) for configuring Arc-enabled Kubernetes with workload identity federation. Refer to that documentation for any additional assistance.\n\nIf your cluster isn't yet connected to Azure Arc, [follow these steps](quickstart-connect-cluster.md). During these steps, enable workload identity federation as part of the `connect` command:\n\n```azurecli\naz connectedk8s connect --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --enable-oidc-issuer\n```\n\nIf your cluster is already connected to Azure Arc, enable workload identity using the `update` command:\n\n```azurecli\naz connectedk8s update --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --enable-oidc-issuer\n```\n\nNow configure your cluster to issue Service Account tokens with a new issuer URL (`service-account-issuer`) that enables Microsoft Entra ID to find the public keys necessary for it to validate these tokens. These public keys are for the cluster's own service account token issuer, and they were obtained and cloud-hosted at this URL as a result of the `--enable-oidc-issuer` option that you set earlier.\n\nOptionally, you can also configure limits on the SSE's own permissions as a privileged resource running in the control plane by configuring [`OwnerReferencesPermissionEnforcement`](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement) [admission controller](https://Kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#how-do-i-turn-on-an-admission-controller). This admission controller constrains how much the SSE can change other objects in the cluster.\n\n1. Configure your [kube-apiserver](https://Kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/) with the issuer URL field and permissions enforcement. The following example is for a k3s cluster. Your cluster may have different means for changing API server arguments: `--kube-apiserver-arg=\"--service-account-issuer=${SERVICE_ACCOUNT_ISSUER}\" and --kube-apiserver-arg=\"--enable-admission-plugins=OwnerReferencesPermissionEnforcement\"`.\n\n   - Get the service account issuer URL.\n\n      ```console\n      export SERVICE_ACCOUNT_ISSUER=\"$(az connectedk8s show --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --query \"oidcIssuerProfile.issuerUrl\" --output tsv)\"\n      echo $SERVICE_ACCOUNT_ISSUER\n      ```\n\n   - Open the K3s server configuration file.\n\n      ```console\n      sudo nano /etc/systemd/system/k3s.service\n      ```",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/secret-store-extension.md",
    "heading_path": [
      "Use the Secret Store extension to fetch secrets for offline access in Azure Arc-enabled Kubernetes clusters",
      "Activate workload identity federation in your cluster",
      "[Arc-enabled Kubernetes](#tab/arc-k8s)"
    ],
    "section_level": 3,
    "chunk_index": 3,
    "frontmatter": {
      "title": "Use the Azure Key Vault Secret Store extension to sync secrets to the Kubernetes secret store for offline access in Azure Arc-enabled Kubernetes clusters",
      "description": "The Azure Key Vault Secret Store extension for Kubernetes (\"SSE\") automatically synchronizes secrets from an Azure Key Vault to a Kubernetes cluster for offline access.",
      "ms.date": "09/26/2024",
      "ms.topic": "how-to",
      "ms.custom": "references_regions, ignite-2024"
    },
    "embedding_content": "Document: Use the Azure Key Vault Secret Store extension to sync secrets to the Kubernetes secret store for offline access in Azure Arc-enabled Kubernetes clusters | Topic: how-to | Description: The Azure Key Vault Secret Store extension for Kubernetes (\"SSE\") automatically synchronizes secrets | Section: Use the Secret Store extension to fetch secrets for offline access in Azure Arc-enabled Kubernetes clusters > Activate workload identity federation in your cluster > [Arc-enabled Kubernetes](#tab/arc-k8s) | ### [Arc-enabled Kubernetes](#tab/arc-k8s)\n\n> [!TIP]\n> The following steps are based on the [How-to guide](/azure/azure-arc/kubernetes/workload-identity) for configuring Arc-enabled Kubernetes with workload identity federation. Refer to that documentation for any additional assistance.\n\nIf your cluster isn't yet connected to Azure Arc, [follow these steps](quickstart-connect-cluster.md). During these steps, enable workload identity federation as part of the `connect` command:\n\n```azurecli\naz connectedk8s connect --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --enable-oidc-issuer\n```\n\nIf your cluster is already connected to Azure Arc, enable workload identity using the `update` command:\n\n```azurecli\naz connectedk8s update --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --enable-oidc-issuer\n```\n\nNow configure your cluster to issue Service Account tokens with a new issuer URL (`service-account-issuer`) that enables Microsoft Entra ID to find the public keys necessary for it to validate these tokens. These public keys are for the cluster's own service account token issuer, and they were obtained and cloud-hosted at this URL as a result of the `--enable-oidc-issuer` option that you set earlier.\n\nOptionally, you can also configure limits on the SSE's own permissions as a privileged resource running in the control plane by configuring [`OwnerReferencesPermissionEnforcement`](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement) [admission controller](https://Kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#how-do-i-turn-on-an-admission-controller). This admission controller constrains how much the SSE can change other objects in the cluster.\n\n1. Configure your [kube-apiserver](https://Kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/) with the issuer URL field and permissions enforcement. The following example is for a k3s cluster. Your cluster may have different means for changing API server arguments: `--kube-apiserver-arg=\"--service-account-issuer=${SERVICE_ACCOUNT_ISSUER}\" and --kube-apiserver-arg=\"--enable-admission-plugins=OwnerReferencesPermissionEnforcement\"`.\n\n   - Get the service account issuer URL.\n\n      ```console\n      export SERVICE_ACCOUNT_ISSUER=\"$(az connectedk8s show --name ${CLUSTER_NAME} --resource-group ${RESOURCE_GROUP} --query \"oidcIssuerProfile.issuerUrl\" --output tsv)\"\n      echo $SERVICE_ACCOUNT_ISSUER\n      ```\n\n   - Open the K3s server configuration file.\n\n      ```console\n      sudo nano /etc/systemd/system/k3s.service\n      ```",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "ef34c3bd839181c02ded4b346b8309da0b8ac10b6d0f14d0c482d45097a31058",
    "file_id": "5b880508d2c3419668daf37d0ffb257e9268a80b1899afb8daa2f62b08b56d1e",
    "chunk_id": "c19e3eb682e75753229ae32d7f32a31e999614ed04655b26b8bc0c4bd1150587",
    "prev_chunk_id": "c6d78907ebcdaae1b39d63a5bf96f04e8197bbae71959b6a98e8c8e3fe0cd35d",
    "next_chunk_id": "275015d34ba6752cf055e2cacfda44dfcc85897737745e12000f55178c566fdf",
    "parent_heading_chunk_id": "1d89adb82b306e05d51b0521f878483effeec0401997d8f885aad8a05f30c6b0",
    "total_chunks_in_file": 29
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/secret-store-extension.md",
    "section": [
      "Use the Secret Store extension to fetch secrets for offline access in Azure Arc-enabled Kubernetes clusters",
      "Activate workload identity federation in your cluster",
      "[Arc-enabled Kubernetes](#tab/arc-k8s)"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:35.316171"
}