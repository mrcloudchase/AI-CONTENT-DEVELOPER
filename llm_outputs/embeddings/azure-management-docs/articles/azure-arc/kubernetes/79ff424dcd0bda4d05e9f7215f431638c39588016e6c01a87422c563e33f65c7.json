{
  "data": {
    "content": "## 2 - Platform Team: Onboard a new application\n\nThe Application Team runs their software development lifecycle. They build their application and promote it across environments. They're not aware of what cluster types are available and where their application will be deployed. But they do know that they want to deploy their application in `Dev` environment for functional and performance testing and in `Stage` environment for UAT testing.\n\nThe Application Team describes this intention in the [workload](https://github.com/microsoft/kalypso-app-src/blob/main/workload/workload.yaml) file in the [Application Source](https://github.com/microsoft/kalypso-app-src) repository:\n\n```yaml\napiVersion: scheduler.kalypso.io/v1alpha1\nkind: Workload\nmetadata:\n  name: hello-world-app\n  labels:\n    type: application\n    family: force\nspec:\n  deploymentTargets:\n    - name: functional-test\n      labels:\n        purpose: functional-test\n        edge: \"true\"\n      environment: dev\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: dev\n        path: ./functional-test\n    - name: performance-test\n      labels:\n        purpose: performance-test\n        edge: \"false\"\n      environment: dev\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: dev\n        path: ./performance-test   \n    - name: uat-test\n      labels:\n        purpose: uat-test\n      environment: stage\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: stage\n        path: ./uat-test   \n```\n\nThis file contains a list of three deployment targets. These targets are marked with custom labels and point to the folders in [Application GitOps](https://github.com/microsoft/kalypso-app-gitops) repository where the Application Team generates application manifests for each deployment target.\n\nWith this file, Application Team requests Kubernetes compute resources from the Platform Team. In response, the Platform Team must register the application in the [Control Plane](https://github.com/microsoft/kalypso-control-plane) repo.\n \nTo register the application, open a terminal and use the following script: \n\n```bash\nexport org=<GitHub org>\nexport prefix=<prefix>",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Explore workload management in a multi-cluster environment with GitOps",
      "2 - Platform Team: Onboard a new application"
    ],
    "section_level": 2,
    "chunk_index": 5,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Explore workload management in a multi-cluster environment with GitOps > 2 - Platform Team: Onboard a new application | ## 2 - Platform Team: Onboard a new application\n\nThe Application Team runs their software development lifecycle. They build their application and promote it across environments. They're not aware of what cluster types are available and where their application will be deployed. But they do know that they want to deploy their application in `Dev` environment for functional and performance testing and in `Stage` environment for UAT testing.\n\nThe Application Team describes this intention in the [workload](https://github.com/microsoft/kalypso-app-src/blob/main/workload/workload.yaml) file in the [Application Source](https://github.com/microsoft/kalypso-app-src) repository:\n\n```yaml\napiVersion: scheduler.kalypso.io/v1alpha1\nkind: Workload\nmetadata:\n  name: hello-world-app\n  labels:\n    type: application\n    family: force\nspec:\n  deploymentTargets:\n    - name: functional-test\n      labels:\n        purpose: functional-test\n        edge: \"true\"\n      environment: dev\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: dev\n        path: ./functional-test\n    - name: performance-test\n      labels:\n        purpose: performance-test\n        edge: \"false\"\n      environment: dev\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: dev\n        path: ./performance-test   \n    - name: uat-test\n      labels:\n        purpose: uat-test\n      environment: stage\n      manifests:\n        repo: https://github.com/microsoft/kalypso-app-gitops\n        branch: stage\n        path: ./uat-test   \n```\n\nThis file contains a list of three deployment targets. These targets are marked with custom labels and point to the folders in [Application GitOps](https://github.com/microsoft/kalypso-app-gitops) repository where the Application Team generates application manifests for each deployment target.\n\nWith this file, Application Team requests Kubernetes compute resources from the Platform Team. In response, the Platform Team must register the application in the [Control Plane](https://github.com/microsoft/kalypso-control-plane) repo.\n \nTo register the application, open a terminal and use the following script: \n\n```bash\nexport org=<GitHub org>\nexport prefix=<prefix>",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "c671ca756d0b017f8a310b20b64800a12b2f1f0858b1ec79d8668b0b2a493b5f",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "79ff424dcd0bda4d05e9f7215f431638c39588016e6c01a87422c563e33f65c7",
    "prev_chunk_id": "92e8fd78a11f95ebbf03016966d0a7299cc5571692769a3b9acddbee07abbcbb",
    "next_chunk_id": "d149a4814248b9ba42290232454d8c8736ee3ab8c0efbca63c7a3f9f472ada58",
    "parent_heading_chunk_id": "c39eb7daf77ea6d0513658d0f662b165054c167d0c5166043eb2ef0bb7515c24",
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Explore workload management in a multi-cluster environment with GitOps",
      "2 - Platform Team: Onboard a new application"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.991467"
}