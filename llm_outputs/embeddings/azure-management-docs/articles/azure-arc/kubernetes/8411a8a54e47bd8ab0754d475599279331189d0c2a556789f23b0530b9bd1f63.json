{
  "data": {
    "content": "### Label matching approach \n\nA simple and flexible way to implement configuration composition is the label matching approach.\n\n:::image type=\"content\" source=\"media/concept-workload-management/label-matching-approach.png\" alt-text=\"Diagram showing label matching configuration composition model.\" lightbox=\"media/concept-workload-management/label-matching-approach.png\":::\n\nIn this diagram, configuration containers group configuration values at different levels such as **Site**, **Line**, **Environment**, and **Region**. Depending on the organization, the values in these containers may be provided by different personas, such as IT Global, Site IT, Equipment owners, or just the Platform team. Each container is marked with a set of labels that define where values from this container are applicable. Besides the configuration containers, there are abstractions representing an application and a host where the application is to be deployed. Both of them are marked with the labels as well. The combination of the application's and host's labels composes the instance's labels set. This set determines the values of configuration containers that should be pulled into the application configuration snapshot. This snapshot is delivered to the host and fed to the application instance. The control plane iterates over the containers and evaluates if the container's labels match the instance's labels set. If so, the container's values are included in the final snapshot; if not, the container is skipped. The control plane can be configured with different strategies of overriding and merging for the complex objects and arrays.\n\nOne of the biggest advantages of this approach is scalability. The structure of configuration containers is abstracted away from the application instance, which doesn't really know where the values are coming from. This lets the platform team easily manipulate the configuration containers, introduce new levels and configuration groups without reconfiguring hundreds of application instances.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "heading_path": [
      "Workload management in a multi-cluster environment with GitOps",
      "Platform configuration concepts",
      "Label matching approach"
    ],
    "section_level": 3,
    "chunk_index": 20,
    "frontmatter": {
      "title": "Workload management in a multi-cluster environment with GitOps",
      "description": "This article provides a conceptual overview of the workload management in a multi-cluster environment with GitOps.",
      "ms.date": "03/29/2023",
      "ms.topic": "concept-article",
      "author": "eedorenko",
      "ms.author": "iefedore"
    },
    "embedding_content": "Document: Workload management in a multi-cluster environment with GitOps | Topic: concept-article | Description: This article provides a conceptual overview of the workload management in a multi-cluster environmen | Section: Workload management in a multi-cluster environment with GitOps > Platform configuration concepts > Label matching approach | ### Label matching approach \n\nA simple and flexible way to implement configuration composition is the label matching approach.\n\n:::image type=\"content\" source=\"media/concept-workload-management/label-matching-approach.png\" alt-text=\"Diagram showing label matching configuration composition model.\" lightbox=\"media/concept-workload-management/label-matching-approach.png\":::\n\nIn this diagram, configuration containers group configuration values at different levels such as **Site**, **Line**, **Environment**, and **Region**. Depending on the organization, the values in these containers may be provided by different personas, such as IT Global, Site IT, Equipment owners, or just the Platform team. Each container is marked with a set of labels that define where values from this container are applicable. Besides the configuration containers, there are abstractions representing an application and a host where the application is to be deployed. Both of them are marked with the labels as well. The combination of the application's and host's labels composes the instance's labels set. This set determines the values of configuration containers that should be pulled into the application configuration snapshot. This snapshot is delivered to the host and fed to the application instance. The control plane iterates over the containers and evaluates if the container's labels match the instance's labels set. If so, the container's values are included in the final snapshot; if not, the container is skipped. The control plane can be configured with different strategies of overriding and merging for the complex objects and arrays.\n\nOne of the biggest advantages of this approach is scalability. The structure of configuration containers is abstracted away from the application instance, which doesn't really know where the values are coming from. This lets the platform team easily manipulate the configuration containers, introduce new levels and configuration groups without reconfiguring hundreds of application instances.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "ed996ae5327be10165f37ff7fa270abab271b83562195f785883cc57ea23986e",
    "file_id": "68b84d3ed0d9d36d4ec56ccb018594e09d36629cea891036b7b04a8fba544e6e",
    "chunk_id": "8411a8a54e47bd8ab0754d475599279331189d0c2a556789f23b0530b9bd1f63",
    "prev_chunk_id": "6ddb702753e6b52ea072cf47b88bb9c55dff53bbc3ccb57ba168a059d931211d",
    "next_chunk_id": "a3ae213a6d2e6920e70af215f454280169852a079fcb0f97aa7c217863182fcd",
    "parent_heading_chunk_id": "4c19057e6a3219c5ce06dac7587993a94ef4dbba041d39c1a6acdb0ae0f2a270",
    "total_chunks_in_file": 31
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "section": [
      "Workload management in a multi-cluster environment with GitOps",
      "Platform configuration concepts",
      "Label matching approach"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.689319"
}