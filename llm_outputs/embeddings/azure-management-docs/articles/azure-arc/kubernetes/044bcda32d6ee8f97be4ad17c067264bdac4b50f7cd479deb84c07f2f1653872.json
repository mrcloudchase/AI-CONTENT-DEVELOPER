{
  "data": {
    "content": "#### [Azure PowerShell](#tab/azure-powershell)\n\n1. With the `kubeconfig` file pointing to the `apiserver` of your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace for `default`.\n\n   ```console\n   kubectl create serviceaccount demo-user -n default\n   ```\n\n1. Create a ClusterRoleBinding or RoleBinding to [grant this service account the appropriate permissions on the cluster](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-create-rolebinding). If you used a different namespace in the first command, substitute it here for `default`.\n\n    ```console\n    kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user\n    ```\n\n1. Create a service account token. Create a `demo-user-secret.yaml` file with the following content:\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: demo-user-secret\n      annotations:\n        kubernetes.io/service-account.name: demo-user\n    type: kubernetes.io/service-account-token\n    ```\n\n   Then run these commands:\n\n    ```console\n    kubectl apply -f demo-user-secret.yaml\n    ```\n\n    ```console\n    $TOKEN = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret demo-user-secret -o jsonpath='{$.data.token}'))))\n    ```\n\n1. Get the token to output to console.\n  \n     ```console\n     echo $TOKEN\n     ```\n\n---",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/cluster-connect.md",
    "heading_path": [
      "Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters",
      "Set up authentication",
      "Service account token authentication option",
      "[Azure PowerShell](#tab/azure-powershell)"
    ],
    "section_level": 4,
    "chunk_index": 10,
    "frontmatter": {
      "title": "Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters.",
      "ms.date": "01/24/2025",
      "ms.topic": "how-to",
      "ms.custom": "devx-track-azurecli",
      "description": "With cluster connect, you can securely connect to Azure Arc-enabled Kubernetes clusters from anywhere without requiring any inbound port to be enabled on the firewall."
    },
    "embedding_content": "Document: Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters. | Topic: how-to | Description: With cluster connect, you can securely connect to Azure Arc-enabled Kubernetes clusters from anywher | Section: Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters > Set up authentication > Service account token authentication option > [Azure PowerShell](#tab/azure-powershell) | #### [Azure PowerShell](#tab/azure-powershell)\n\n1. With the `kubeconfig` file pointing to the `apiserver` of your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace for `default`.\n\n   ```console\n   kubectl create serviceaccount demo-user -n default\n   ```\n\n1. Create a ClusterRoleBinding or RoleBinding to [grant this service account the appropriate permissions on the cluster](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#kubectl-create-rolebinding). If you used a different namespace in the first command, substitute it here for `default`.\n\n    ```console\n    kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user\n    ```\n\n1. Create a service account token. Create a `demo-user-secret.yaml` file with the following content:\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: demo-user-secret\n      annotations:\n        kubernetes.io/service-account.name: demo-user\n    type: kubernetes.io/service-account-token\n    ```\n\n   Then run these commands:\n\n    ```console\n    kubectl apply -f demo-user-secret.yaml\n    ```\n\n    ```console\n    $TOKEN = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret demo-user-secret -o jsonpath='{$.data.token}'))))\n    ```\n\n1. Get the token to output to console.\n  \n     ```console\n     echo $TOKEN\n     ```\n\n---",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "cee1bdc14c26f1c53d051eeca3ca500fbd0ac9de4444c3a0ddb922fe6990d0ba",
    "file_id": "59611357f05266b375ce07b3061290a455e0393846f6f5593bc8b08af83d3f07",
    "chunk_id": "044bcda32d6ee8f97be4ad17c067264bdac4b50f7cd479deb84c07f2f1653872",
    "prev_chunk_id": "ae37471c7574c0dcb8562a939f9ce24279fb7ba2733678de3e479485a34b575d",
    "next_chunk_id": "0ebb43d4ecbd71e79761983fb3768417c23a89c4d33c5a1640e52330b72d1673",
    "parent_heading_chunk_id": "d81403c6a7b3afc6e4dfb428afb3c6562fa56a7271bbe4a5e8649f52419c3cf6",
    "total_chunks_in_file": 14
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/cluster-connect.md",
    "section": [
      "Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters",
      "Set up authentication",
      "Service account token authentication option",
      "[Azure PowerShell](#tab/azure-powershell)"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:20.216851"
}