{
  "data": {
    "content": "### Explore Control Plane\n\nThe `control plane` repository contains three branches: `main`, `dev` and `stage`. The `dev` and `stage` branches contain configurations that are specific for `Dev` and `Stage` environments. On the other hand, the `main` branch doesn't represent any specific environment. The content of the `main` branch is common and used by all environments. Any change to the `main` branch is a subject to be promoted across environments. For example, a new application or a new template can be promoted to the `Stage` environment only after successful testing on the `Dev` environment.\n\nThe `main` branch:\n\n|Folder|Description|\n|------|-----------|\n|.github/workflows| Contains GitHub workflows that implement the promotional flow.|\n|.environments| Contains a list of environments with pointers to the branches with the environment configurations.|\n|templates| Contains manifest templates for various reconcilers and a template for the workload namespace.| \n|workloads| Contains a list of onboarded applications and services with pointers to the corresponding GitOps repositories.|  \n\nThe `dev` and `stage` branches:\n\n|Item|Description|\n|----|-----------|\n|cluster-types| Contains a list of available cluster types in the environment. The cluster types are grouped in custom subfolders. Each cluster type is marked with a set of labels. It specifies a reconciler type that it uses to fetch the manifests from GitOps repositories. The subfolders also contain a number of config maps with the platform configuration values available on the cluster types.|\n|configs/dev-config.yaml| Contains config maps with the platform configuration values applicable for all cluster types in the environment.|\n|scheduling| Contains scheduling policies that map workload deployment targets to the cluster types in the environment.|\n|base-repo.yaml| A pointer to the place in the `Control Plane` repository (`main`) from where the scheduler should take templates and workload registrations.| \n|gitops-repo.yaml| A pointer to the place in the `Platform GitOps` repository to where the scheduler should PR generated manifests.|\n\n> [!TIP]\n> The folder structure in the `Control Plane` repository doesn't really matter. This example provides one way of organizing files in the repository, but feel free to do it in your own preferred way. The scheduler is interested in the content of the files, rather than where the files are located.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Explore workload management in a multi-cluster environment with GitOps",
      "1 - Deploy the sample",
      "Explore Control Plane"
    ],
    "section_level": 3,
    "chunk_index": 4,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Explore workload management in a multi-cluster environment with GitOps > 1 - Deploy the sample > Explore Control Plane | ### Explore Control Plane\n\nThe `control plane` repository contains three branches: `main`, `dev` and `stage`. The `dev` and `stage` branches contain configurations that are specific for `Dev` and `Stage` environments. On the other hand, the `main` branch doesn't represent any specific environment. The content of the `main` branch is common and used by all environments. Any change to the `main` branch is a subject to be promoted across environments. For example, a new application or a new template can be promoted to the `Stage` environment only after successful testing on the `Dev` environment.\n\nThe `main` branch:\n\n|Folder|Description|\n|------|-----------|\n|.github/workflows| Contains GitHub workflows that implement the promotional flow.|\n|.environments| Contains a list of environments with pointers to the branches with the environment configurations.|\n|templates| Contains manifest templates for various reconcilers and a template for the workload namespace.| \n|workloads| Contains a list of onboarded applications and services with pointers to the corresponding GitOps repositories.|  \n\nThe `dev` and `stage` branches:\n\n|Item|Description|\n|----|-----------|\n|cluster-types| Contains a list of available cluster types in the environment. The cluster types are grouped in custom subfolders. Each cluster type is marked with a set of labels. It specifies a reconciler type that it uses to fetch the manifests from GitOps repositories. The subfolders also contain a number of config maps with the platform configuration values available on the cluster types.|\n|configs/dev-config.yaml| Contains config maps with the platform configuration values applicable for all cluster types in the environment.|\n|scheduling| Contains scheduling policies that map workload deployment targets to the cluster types in the environment.|\n|base-repo.yaml| A pointer to the place in the `Control Plane` repository (`main`) from where the scheduler should take templates and workload registrations.| \n|gitops-repo.yaml| A pointer to the place in the `Platform GitOps` repository to where the scheduler should PR generated manifests.|\n\n> [!TIP]\n> The folder structure in the `Control Plane` repository doesn't really matter. This example provides one way of organizing files in the repository, but feel free to do it in your own preferred way. The scheduler is interested in the content of the files, rather than where the files are located.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "1955bb1369e5c524a3c4f64e393f7efb243420b72e88d469e7d54dd6f165df20",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "92e8fd78a11f95ebbf03016966d0a7299cc5571692769a3b9acddbee07abbcbb",
    "prev_chunk_id": "4ae870cb7fc727d254f96436960646994cc9f78bb57936cfa5bf16c9cb5e79fb",
    "next_chunk_id": "79ff424dcd0bda4d05e9f7215f431638c39588016e6c01a87422c563e33f65c7",
    "parent_heading_chunk_id": "9f28456fd4abc0cb3e68a94483324c34e795c5e6e56ff52a125f6da92c713309",
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Explore workload management in a multi-cluster environment with GitOps",
      "1 - Deploy the sample",
      "Explore Control Plane"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.976563"
}