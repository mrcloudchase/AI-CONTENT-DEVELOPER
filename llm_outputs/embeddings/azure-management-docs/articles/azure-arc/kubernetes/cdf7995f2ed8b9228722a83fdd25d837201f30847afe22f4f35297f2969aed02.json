{
  "data": {
    "content": "| SecretSync Status Type     | Details      | Steps to fix/investigate further    |\n|------------|--------------|-------------------------------------|\n| `CreateSucceeded` | The secret was created successfully. | n/a |\n| `CreateFailedProviderError` | Secret creation failed due to some issue with the provider (connection to Azure Key Vault). This failure could be due to internet connectivity, insufficient permissions for the identity syncing secrets, misconfiguration of the `SecretProviderClass`, or other issues. | Investigate further by looking at the logs of the provider using the following commands: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='provider-azure-installer'``` |\n| `CreateFailedInvalidLabel` | The secret creation failed because the secret already exists without the correct Kubernetes label that the SSE uses to manage its secrets.| Remove the existing label and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `CreateFailedInvalidAnnotation` | Secret creation failed because the secret already exists without the correct Kubernetes annotation that the SSE uses to manage its secrets. | Remove the existing annotation and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateNoValueChangeSucceeded` | The SSE checked Azure Key Vault for updates at the end of the configured poll interval, but there were no changes to sync. | n/a |\n| `UpdateValueChangeOrForceUpdateSucceeded` | The SSE checked Azure Key Vault for updates and successfully updated the value. | n/a |\n| `UpdateFailedInvalidLabel` | Secret update failed because the label on the secret that the SSE uses to manage its secrets was modified. | Remove the existing label and secret, and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateFailedInvalidAnnotation` | Secret update failed because the annotation on the secret that the SSE uses to manage its secrets was modified. | Remove the existing annotation and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateFailedProviderError` | Secret update failed due to some issue with the provider (connection to Azure Key Vault). This failure could be due to internet connectivity, insufficient permissions for the identity syncing secrets, configuration of the `SecretProviderClass`, or other issues. | Investigate further by looking at the logs of the provider using the following commands: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='provider-azure-installer'``` |\n| `UserInputValidationFailed` | Secret update failed because the secret sync class was configured incorrectly (such as an invalid secret type). | Review the secret sync class definition and correct any errors. Then, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```), delete the secret sync class (```kubectl delete -f <path_to_secret_sync>```), and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `ControllerSpcError` | Secret update failed because the SSE failed to get the provider class or the provider class is misconfigured. | Review the provider class and correct any errors. Then, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```), delete the provider class (```kubectl delete -f <path_to_provider>```), and reapply the provider class (```kubectl apply -f <path_to_provider>```). |\n| `ControllerInternalError` | Secret update failed due to an internal error in the SSE. | Check the SSE logs or the events for more information: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='manager'``` |\n| `SecretPatchFailedUnknownError` | Secret update failed during patching the Kubernetes secret value. This failure might occur if the secret was modified by someone other than the SSE or if there were issues during an update of the SSE. | Try deleting the secret and `SecretSync` object, then let the SSE recreate the secret by reapplying the secret sync CR: <br>```kubectl delete secret <secret-name>``` <br>```kubectl delete secretsync <secret-name>```  <br>```kubectl apply -f <path_to_secret_sync>``` |",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/secret-store-extension.md",
    "heading_path": [
      "View details of all secrets in the namespace",
      "Troubleshooting"
    ],
    "section_level": 2,
    "chunk_index": 26,
    "frontmatter": {
      "title": "Use the Azure Key Vault Secret Store extension to sync secrets to the Kubernetes secret store for offline access in Azure Arc-enabled Kubernetes clusters",
      "description": "The Azure Key Vault Secret Store extension for Kubernetes (\"SSE\") automatically synchronizes secrets from an Azure Key Vault to a Kubernetes cluster for offline access.",
      "ms.date": "09/26/2024",
      "ms.topic": "how-to",
      "ms.custom": "references_regions, ignite-2024"
    },
    "embedding_content": "Document: Use the Azure Key Vault Secret Store extension to sync secrets to the Kubernetes secret store for offline access in Azure Arc-enabled Kubernetes clusters | Topic: how-to | Description: The Azure Key Vault Secret Store extension for Kubernetes (\"SSE\") automatically synchronizes secrets | Section: View details of all secrets in the namespace > Troubleshooting | | SecretSync Status Type     | Details      | Steps to fix/investigate further    |\n|------------|--------------|-------------------------------------|\n| `CreateSucceeded` | The secret was created successfully. | n/a |\n| `CreateFailedProviderError` | Secret creation failed due to some issue with the provider (connection to Azure Key Vault). This failure could be due to internet connectivity, insufficient permissions for the identity syncing secrets, misconfiguration of the `SecretProviderClass`, or other issues. | Investigate further by looking at the logs of the provider using the following commands: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='provider-azure-installer'``` |\n| `CreateFailedInvalidLabel` | The secret creation failed because the secret already exists without the correct Kubernetes label that the SSE uses to manage its secrets.| Remove the existing label and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `CreateFailedInvalidAnnotation` | Secret creation failed because the secret already exists without the correct Kubernetes annotation that the SSE uses to manage its secrets. | Remove the existing annotation and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateNoValueChangeSucceeded` | The SSE checked Azure Key Vault for updates at the end of the configured poll interval, but there were no changes to sync. | n/a |\n| `UpdateValueChangeOrForceUpdateSucceeded` | The SSE checked Azure Key Vault for updates and successfully updated the value. | n/a |\n| `UpdateFailedInvalidLabel` | Secret update failed because the label on the secret that the SSE uses to manage its secrets was modified. | Remove the existing label and secret, and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateFailedInvalidAnnotation` | Secret update failed because the annotation on the secret that the SSE uses to manage its secrets was modified. | Remove the existing annotation and secret and allow the SSE to recreate the secret: ```kubectl delete secret <secret-name>``` <br>To force the SSE to recreate the secret faster than the configured rotation poll interval, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```) and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `UpdateFailedProviderError` | Secret update failed due to some issue with the provider (connection to Azure Key Vault). This failure could be due to internet connectivity, insufficient permissions for the identity syncing secrets, configuration of the `SecretProviderClass`, or other issues. | Investigate further by looking at the logs of the provider using the following commands: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='provider-azure-installer'``` |\n| `UserInputValidationFailed` | Secret update failed because the secret sync class was configured incorrectly (such as an invalid secret type). | Review the secret sync class definition and correct any errors. Then, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```), delete the secret sync class (```kubectl delete -f <path_to_secret_sync>```), and reapply the secret sync class (```kubectl apply -f <path_to_secret_sync>```). |\n| `ControllerSpcError` | Secret update failed because the SSE failed to get the provider class or the provider class is misconfigured. | Review the provider class and correct any errors. Then, delete the `SecretSync` object (```kubectl delete secretsync <secret-name>```), delete the provider class (```kubectl delete -f <path_to_provider>```), and reapply the provider class (```kubectl apply -f <path_to_provider>```). |\n| `ControllerInternalError` | Secret update failed due to an internal error in the SSE. | Check the SSE logs or the events for more information: <br>```kubectl get pods -n azure-secret-store``` <br>```kubectl logs <secret-sync-controller-pod-name> -n azure-secret-store --container='manager'``` |\n| `SecretPatchFailedUnknownError` | Secret update failed during patching the Kubernetes secret value. This failure might occur if the secret was modified by someone other than the SSE or if there were issues during an update of the SSE. | Try deleting the secret and `SecretSync` object, then let the SSE recreate the secret by reapplying the secret sync CR: <br>```kubectl delete secret <secret-name>``` <br>```kubectl delete secretsync <secret-name>```  <br>```kubectl apply -f <path_to_secret_sync>``` |",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "3cd9cae0f2947574da71750f0a853d2a4f2cdf05e04b9c4f2b73a48729838701",
    "file_id": "5b880508d2c3419668daf37d0ffb257e9268a80b1899afb8daa2f62b08b56d1e",
    "chunk_id": "cdf7995f2ed8b9228722a83fdd25d837201f30847afe22f4f35297f2969aed02",
    "prev_chunk_id": "2210163bd005b47a9fd77f4f076d3df260b260436b010487f3204d4a2759015e",
    "next_chunk_id": "9ef5bbce8fdb5de66fdcfdc06fcf9556af5391edb905715e7f7dbd776709e1c8",
    "parent_heading_chunk_id": "d8e216dfba616ac0f872bf7bba857b74d4629faddacd2c09cdfdef9735f6677e",
    "total_chunks_in_file": 29
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/secret-store-extension.md",
    "section": [
      "View details of all secrets in the namespace",
      "Troubleshooting"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:21.068557"
}