{
  "data": {
    "content": "# Create a scheduling policy for the performance-test deployment target\ncat <<EOF >scheduling/kaizen/performance-test-policy.yaml\napiVersion: scheduler.kalypso.io/v1alpha1\nkind: SchedulingPolicy\nmetadata:\n  name: performance-test-policy\nspec:\n  deploymentTargetSelector:\n    workspace: kaizen-app-team\n    labelSelector:\n      matchLabels:\n        purpose: performance-test\n        edge: \"false\"\n  clusterTypeSelector:\n    labelSelector:\n      matchLabels:\n        size: large\nEOF\n\ngit add .\ngit commit -m 'application scheduling policies'\ngit config pull.rebase false\ngit pull --no-edit\ngit push\n```\n\nThe first policy states that all deployment targets from the `kaizen-app-team` workspace, marked with labels `purpose: functional-test` and `edge: \"true\"` should be scheduled on all environment cluster types that are marked with label `restricted: \"true\"`. You can treat a workspace as a group of applications produced by an application team.\n\nThe second policy states that all deployment targets from the `kaizen-app-team` workspace, marked with labels `purpose: performance-test` and `edge: \"false\"` should be scheduled on all environment cluster types that are marked with label `size: \"large\"`.\n\nThis push to the `dev` branch triggers the scheduling process and creates a PR to the `dev` branch in the `Platform GitOps` repository:\n\n:::image type=\"content\" source=\"media/workload-management/pr-to-dev-with-app-assignment.png\" alt-text=\"Screenshot showing a PR to dev environment with application assignment.\" lightbox=\"media/workload-management/pr-to-dev-with-app-assignment.png\":::\n\nBesides `Promoted_Commit_id`, which is just tracking information for the promotion CD flow, the PR contains assignment manifests. The `functional-test` deployment target is assigned to the `drone` cluster type, and the `performance-test` deployment target is assigned to the `large` cluster type. Those manifests will land in `drone` and `large` folders that contain all assignments to these cluster types in the `Dev` environment.\n \nThe `Dev` environment also includes `command-center` and `small` cluster types:\n\n :::image type=\"content\" source=\"media/workload-management/dev-cluster-types.png\" alt-text=\"Screenshot showing cluster types in the Dev environment.\":::\n\nHowever, only the `drone` and `large` cluster types were selected by the scheduling policies that you defined.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Create a scheduling policy for the performance-test deployment target"
    ],
    "section_level": 1,
    "chunk_index": 11,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Create a scheduling policy for the performance-test deployment target | # Create a scheduling policy for the performance-test deployment target\ncat <<EOF >scheduling/kaizen/performance-test-policy.yaml\napiVersion: scheduler.kalypso.io/v1alpha1\nkind: SchedulingPolicy\nmetadata:\n  name: performance-test-policy\nspec:\n  deploymentTargetSelector:\n    workspace: kaizen-app-team\n    labelSelector:\n      matchLabels:\n        purpose: performance-test\n        edge: \"false\"\n  clusterTypeSelector:\n    labelSelector:\n      matchLabels:\n        size: large\nEOF\n\ngit add .\ngit commit -m 'application scheduling policies'\ngit config pull.rebase false\ngit pull --no-edit\ngit push\n```\n\nThe first policy states that all deployment targets from the `kaizen-app-team` workspace, marked with labels `purpose: functional-test` and `edge: \"true\"` should be scheduled on all environment cluster types that are marked with label `restricted: \"true\"`. You can treat a workspace as a group of applications produced by an application team.\n\nThe second policy states that all deployment targets from the `kaizen-app-team` workspace, marked with labels `purpose: performance-test` and `edge: \"false\"` should be scheduled on all environment cluster types that are marked with label `size: \"large\"`.\n\nThis push to the `dev` branch triggers the scheduling process and creates a PR to the `dev` branch in the `Platform GitOps` repository:\n\n:::image type=\"content\" source=\"media/workload-management/pr-to-dev-with-app-assignment.png\" alt-text=\"Screenshot showing a PR to dev environment with application assignment.\" lightbox=\"media/workload-management/pr-to-dev-with-app-assignment.png\":::\n\nBesides `Promoted_Commit_id`, which is just tracking information for the promotion CD flow, the PR contains assignment manifests. The `functional-test` deployment target is assigned to the `drone` cluster type, and the `performance-test` deployment target is assigned to the `large` cluster type. Those manifests will land in `drone` and `large` folders that contain all assignments to these cluster types in the `Dev` environment.\n \nThe `Dev` environment also includes `command-center` and `small` cluster types:\n\n :::image type=\"content\" source=\"media/workload-management/dev-cluster-types.png\" alt-text=\"Screenshot showing cluster types in the Dev environment.\":::\n\nHowever, only the `drone` and `large` cluster types were selected by the scheduling policies that you defined.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "47d227f46ef66e08a95fa2e06abd70b7f094c3f7fec620fe531bdf2cba685166",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "e120581d2a314a3910de746be9362ce6d3e6ff6e9b38cd0972d77f00e9c79a81",
    "prev_chunk_id": "864b40c94784e45cc6c67976b83f0c8874e96bc505979d97d25db8d79f0ea74a",
    "next_chunk_id": "b40b543a2dd7a68fe37f14126fc97a2d926aa1cfbe332779320ccbf0a26b054c",
    "parent_heading_chunk_id": null,
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Create a scheduling policy for the performance-test deployment target"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.522617"
}