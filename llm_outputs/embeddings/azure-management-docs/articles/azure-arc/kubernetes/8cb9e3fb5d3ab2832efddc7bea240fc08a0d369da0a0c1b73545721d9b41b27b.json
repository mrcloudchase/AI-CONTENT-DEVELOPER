{
  "data": {
    "content": "## Provide identity to access Azure Key Vault\n\nCurrently, the Secrets Store CSI Driver on Arc-enabled clusters can be accessed through a service principal. Follow these steps to provide an identity that can access your Key Vault.\n\n1. Follow the steps [to create a service principal in Azure](/entra/identity-platform/howto-create-service-principal-portal). Take note of the Client ID and Client Secret generated in this step.\n1. Next, [ensure Azure Key Vault has GET permission to the created service principal](/azure/key-vault/general/assign-access-policy#assign-an-access-policy).\n1. Use the client ID and Client Secret from the first step to create a Kubernetes secret on the connected cluster:\n\n   ```bash\n   kubectl create secret generic secrets-store-creds --from-literal clientid=\"<client-id>\" --from-literal clientsecret=\"<client-secret>\"\n   ```\n\n1. Label the created secret:\n\n   ```bash\n   kubectl label secret secrets-store-creds secrets-store.csi.k8s.io/used=true\n   ```\n\n1. Create a `SecretProviderClass` with the following YAML, filling in your values for key vault name, tenant ID, and objects to retrieve from your AKV instance:\n\n   ```yml\n   # This is a SecretProviderClass example using service principal to access Keyvault\n   apiVersion: secrets-store.csi.x-k8s.io/v1\n   kind: SecretProviderClass\n   metadata:\n     name: akvprovider-demo\n   spec:\n     provider: azure\n     parameters:\n       usePodIdentity: \"false\"\n       keyvaultName: <key-vault-name>\n       cloudName:                           # Defaults to AzurePublicCloud\n       objects:  |\n         array:\n           - |\n             objectName: DemoSecret\n             objectType: secret             # object types: secret, key or cert\n             objectVersion: \"\"              # [OPTIONAL] object versions, default to latest if empty\n       tenantId: <tenant-Id>                # The tenant ID of the Azure Key Vault instance\n   ```\n\n   For use with national clouds, change `cloudName` to `AzureUSGovernmentCloud` for Azure Government, or to `AzureChinaCloud` for Microsoft Azure operated by 21Vianet.\n\n1. Apply the SecretProviderClass to your cluster:\n\n   ```bash\n   kubectl apply -f secretproviderclass.yaml\n   ```\n\n1. Create a pod with the following YAML, filling in the name of your identity:",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-akv-secrets-provider.md",
    "heading_path": [
      "Use the Azure Key Vault Secrets Provider extension to fetch secrets into Azure Arc-enabled Kubernetes clusters",
      "Provide identity to access Azure Key Vault"
    ],
    "section_level": 2,
    "chunk_index": 8,
    "frontmatter": {
      "title": "Use Azure Key Vault Secrets Provider extension to fetch secrets into Azure Arc-enabled Kubernetes clusters",
      "description": "Learn how to set up the Azure Key Vault Provider for Secrets Store CSI Driver interface as an extension on Azure Arc enabled Kubernetes cluster",
      "ms.custom": "devx-track-azurecli",
      "ms.date": "02/19/2025",
      "ms.topic": "how-to"
    },
    "embedding_content": "Document: Use Azure Key Vault Secrets Provider extension to fetch secrets into Azure Arc-enabled Kubernetes clusters | Topic: how-to | Description: Learn how to set up the Azure Key Vault Provider for Secrets Store CSI Driver interface as an extens | Section: Use the Azure Key Vault Secrets Provider extension to fetch secrets into Azure Arc-enabled Kubernetes clusters > Provide identity to access Azure Key Vault | ## Provide identity to access Azure Key Vault\n\nCurrently, the Secrets Store CSI Driver on Arc-enabled clusters can be accessed through a service principal. Follow these steps to provide an identity that can access your Key Vault.\n\n1. Follow the steps [to create a service principal in Azure](/entra/identity-platform/howto-create-service-principal-portal). Take note of the Client ID and Client Secret generated in this step.\n1. Next, [ensure Azure Key Vault has GET permission to the created service principal](/azure/key-vault/general/assign-access-policy#assign-an-access-policy).\n1. Use the client ID and Client Secret from the first step to create a Kubernetes secret on the connected cluster:\n\n   ```bash\n   kubectl create secret generic secrets-store-creds --from-literal clientid=\"<client-id>\" --from-literal clientsecret=\"<client-secret>\"\n   ```\n\n1. Label the created secret:\n\n   ```bash\n   kubectl label secret secrets-store-creds secrets-store.csi.k8s.io/used=true\n   ```\n\n1. Create a `SecretProviderClass` with the following YAML, filling in your values for key vault name, tenant ID, and objects to retrieve from your AKV instance:\n\n   ```yml\n   # This is a SecretProviderClass example using service principal to access Keyvault\n   apiVersion: secrets-store.csi.x-k8s.io/v1\n   kind: SecretProviderClass\n   metadata:\n     name: akvprovider-demo\n   spec:\n     provider: azure\n     parameters:\n       usePodIdentity: \"false\"\n       keyvaultName: <key-vault-name>\n       cloudName:                           # Defaults to AzurePublicCloud\n       objects:  |\n         array:\n           - |\n             objectName: DemoSecret\n             objectType: secret             # object types: secret, key or cert\n             objectVersion: \"\"              # [OPTIONAL] object versions, default to latest if empty\n       tenantId: <tenant-Id>                # The tenant ID of the Azure Key Vault instance\n   ```\n\n   For use with national clouds, change `cloudName` to `AzureUSGovernmentCloud` for Azure Government, or to `AzureChinaCloud` for Microsoft Azure operated by 21Vianet.\n\n1. Apply the SecretProviderClass to your cluster:\n\n   ```bash\n   kubectl apply -f secretproviderclass.yaml\n   ```\n\n1. Create a pod with the following YAML, filling in the name of your identity:",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "e113532d2baa71d7ce5b832892c253d7368197ed2283432391329deab8b28db0",
    "file_id": "3905075ae8f771091d03e1bbb7e657f419e44305e5a52521e1673109019bdc24",
    "chunk_id": "8cb9e3fb5d3ab2832efddc7bea240fc08a0d369da0a0c1b73545721d9b41b27b",
    "prev_chunk_id": "f1d43b608c5673ee9fe68aa8fefd601ba01588ccb1a9816209b339dc5b08b3ce",
    "next_chunk_id": "801a10c4d64db1bc41c5a9b4202f42708221db8cb88b7f896290c7cfeaeac0b0",
    "parent_heading_chunk_id": "edcda283d90e6f5eb3fa25b07df072e37ab177d69be72ba5e2c9a298b6125912",
    "total_chunks_in_file": 17
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-akv-secrets-provider.md",
    "section": [
      "Use the Azure Key Vault Secrets Provider extension to fetch secrets into Azure Arc-enabled Kubernetes clusters",
      "Provide identity to access Azure Key Vault"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:35.019596"
}