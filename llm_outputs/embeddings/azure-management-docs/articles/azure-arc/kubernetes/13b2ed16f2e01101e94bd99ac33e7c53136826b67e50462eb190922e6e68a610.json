{
  "data": {
    "content": "### CD process approvals\n\nA successful CI pipeline run triggers the CD pipeline to complete the deployment process. This time, the pipeline requires you to approve each deployment environment.\n\n1. Approve the deployment to the `dev` environment.\n1. Once the template and manifest changes to the GitOps repository have been generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state.\n1. If everything looks good, approve and complete the PR.\n1. Wait for the deployment to complete.\n1. As a basic smoke test, navigate to the application page and verify the voting app now displays **Tabs vs Spaces**.\n   * Forward the port locally using `kubectl` and ensure the app works correctly using:\n   `kubectl port-forward -n dev svc/azure-vote-front 8080:80`\n   * View the Azure Vote app in your browser at `http://localhost:8080/` and verify the voting choices have changed to Tabs vs Spaces.\n1. Repeat steps 1-7 for the `stage` environment.\n\nThe deployment is now complete.\n\nFor a detailed overview of all the steps and techniques implemented in the CI/CD workflows used in this tutorial, see the [Azure DevOps GitOps Flow diagram](https://github.com/Azure/arc-cicd-demo-src/blob/master/docs/azdo-gitops.md).",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "heading_path": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "CD process approvals"
    ],
    "section_level": 3,
    "chunk_index": 23,
    "frontmatter": {
      "title": "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "description": "This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled Kubernetes or Azure Kubernetes Service clusters.",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "tutorial",
      "ms.date": "01/15/2025",
      "ms.custom": "template-tutorial, devx-track-azurecli"
    },
    "embedding_content": "Document: Tutorial: Implement CI/CD with GitOps (Flux v2) | Topic: tutorial | Description: This tutorial walks through setting up a CI/CD solution using GitOps (Flux v2) in Azure Arc-enabled  | Section: Tutorial: Implement CI/CD with GitOps (Flux v2) > Implement CI/CD with Azure DevOps > CD process approvals | ### CD process approvals\n\nA successful CI pipeline run triggers the CD pipeline to complete the deployment process. This time, the pipeline requires you to approve each deployment environment.\n\n1. Approve the deployment to the `dev` environment.\n1. Once the template and manifest changes to the GitOps repository have been generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.\n1. Verify the changes to the GitOps repository. You should see:\n   * High-level Helm template changes.\n   * Low-level Kubernetes manifests that show the underlying changes to the desired state.\n1. If everything looks good, approve and complete the PR.\n1. Wait for the deployment to complete.\n1. As a basic smoke test, navigate to the application page and verify the voting app now displays **Tabs vs Spaces**.\n   * Forward the port locally using `kubectl` and ensure the app works correctly using:\n   `kubectl port-forward -n dev svc/azure-vote-front 8080:80`\n   * View the Azure Vote app in your browser at `http://localhost:8080/` and verify the voting choices have changed to Tabs vs Spaces.\n1. Repeat steps 1-7 for the `stage` environment.\n\nThe deployment is now complete.\n\nFor a detailed overview of all the steps and techniques implemented in the CI/CD workflows used in this tutorial, see the [Azure DevOps GitOps Flow diagram](https://github.com/Azure/arc-cicd-demo-src/blob/master/docs/azdo-gitops.md).",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "05629aee5a2bbc595902cfe770a3458bbe6e413311fee3af262ef8c1905e6d9f",
    "file_id": "4d1229b6dc50d3a990ffdf3b851b5e2741d36a02a95ab6b0d3b14c5df8fd629c",
    "chunk_id": "13b2ed16f2e01101e94bd99ac33e7c53136826b67e50462eb190922e6e68a610",
    "prev_chunk_id": "d04b1ba46cd2ed8054cae90d3140b32d1f36f0978bcf4f11fbf551a0e6e45a61",
    "next_chunk_id": "7da5b4c719d6075ea81e3cf829a9d879e142a14c96f6f5c8bee3abf4ae34b81f",
    "parent_heading_chunk_id": "acbb58d677b190c111bc77fa91e51dfd959e8a6b02d52697a361a6d9f20a849c",
    "total_chunks_in_file": 35
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-gitops-flux2-ci-cd.md",
    "section": [
      "Tutorial: Implement CI/CD with GitOps (Flux v2)",
      "Implement CI/CD with Azure DevOps",
      "CD process approvals"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:21.116625"
}