{
  "data": {
    "content": "### [Azure CLI](#tab/azure-cli)\n\nThe following example uses the `az k8s-configuration flux create` command to apply a Flux configuration to a cluster, using the following values and settings:\n\n* The resource group that contains the cluster is `flux-demo-rg`.\n* The name of the Azure Arc cluster is `flux-demo-arc`.\n* The cluster type is Azure Arc (`-t connectedClusters`), but this example also works with AKS (`-t managedClusters`).\n* The name of the Flux configuration is `cluster-config`.\n* The namespace for configuration installation is `cluster-config`.\n* The URL for the public Git repository is `https://github.com/Azure/gitops-flux2-kustomize-helm-mt`.\n* The Git repository branch is `main`.\n* The scope of the configuration is `cluster`. This scope gives the operators permissions to make changes throughout cluster. To use `namespace` scope with this tutorial, [see the changes needed](conceptual-gitops-flux2.md#multi-tenancy).\n* Two kustomizations are specified with names `infra` and `apps`. Each is associated with a path in the repository.\n* The `apps` kustomization depends on the `infra` kustomization. (The `infra` kustomization must finish before the `apps` kustomization runs.)\n* Set `prune=true` on both kustomizations. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.\n\n```azurecli\naz k8s-configuration flux create -g flux-demo-rg \\\n-c flux-demo-arc \\\n-n cluster-config \\\n--namespace cluster-config \\\n-t connectedClusters \\\n--scope cluster \\\n-u https://github.com/Azure/gitops-flux2-kustomize-helm-mt \\\n--branch main  \\\n--kustomization name=infra path=./infrastructure prune=true \\\n--kustomization name=apps path=./apps/staging prune=true dependsOn=\\[\"infra\"\\]\n```\n\nThe `microsoft.flux` extension is installed on the cluster (if it wasn't already installed in a previous GitOps deployment).\n\n> [!TIP]\n> The `az k8s-configuration flux create` command deploys the `microsoft.flux` extension to the cluster and creates the configuration. In some scenarios, you may want to create the flux extension instance separately before you create your configuration resources. To do so, use the `az k8s-extension create` command to [create an instance of the extension on your cluster](extensions.md#create-an-extension-instance).\n\nWhen the flux configuration is first installed, the initial compliance state may be `Pending` or `Non-compliant` because reconciliation is still ongoing. After a minute or so, query the configuration again to see the final compliance state.\n\n```azurecli\naz k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters\n```\n\nTo confirm that the deployment was successful, run the following command:\n\n```azurecli\naz k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters\n```",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "heading_path": [
      "Tutorial: Deploy applications using GitOps with Flux v2",
      "Apply a Flux configuration",
      "[Azure CLI](#tab/azure-cli)"
    ],
    "section_level": 3,
    "chunk_index": 16,
    "frontmatter": {
      "title": "Tutorial: Deploy applications using GitOps with Flux v2",
      "description": "This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deployment in Azure Arc and AKS clusters.",
      "ms.date": "03/26/2025",
      "ms.topic": "tutorial",
      "ms.custom": "template-tutorial, devx-track-azurecli, references_regions"
    },
    "embedding_content": "Document: Tutorial: Deploy applications using GitOps with Flux v2 | Topic: tutorial | Description: This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deploymen | Section: Tutorial: Deploy applications using GitOps with Flux v2 > Apply a Flux configuration > [Azure CLI](#tab/azure-cli) | ### [Azure CLI](#tab/azure-cli)\n\nThe following example uses the `az k8s-configuration flux create` command to apply a Flux configuration to a cluster, using the following values and settings:\n\n* The resource group that contains the cluster is `flux-demo-rg`.\n* The name of the Azure Arc cluster is `flux-demo-arc`.\n* The cluster type is Azure Arc (`-t connectedClusters`), but this example also works with AKS (`-t managedClusters`).\n* The name of the Flux configuration is `cluster-config`.\n* The namespace for configuration installation is `cluster-config`.\n* The URL for the public Git repository is `https://github.com/Azure/gitops-flux2-kustomize-helm-mt`.\n* The Git repository branch is `main`.\n* The scope of the configuration is `cluster`. This scope gives the operators permissions to make changes throughout cluster. To use `namespace` scope with this tutorial, [see the changes needed](conceptual-gitops-flux2.md#multi-tenancy).\n* Two kustomizations are specified with names `infra` and `apps`. Each is associated with a path in the repository.\n* The `apps` kustomization depends on the `infra` kustomization. (The `infra` kustomization must finish before the `apps` kustomization runs.)\n* Set `prune=true` on both kustomizations. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.\n\n```azurecli\naz k8s-configuration flux create -g flux-demo-rg \\\n-c flux-demo-arc \\\n-n cluster-config \\\n--namespace cluster-config \\\n-t connectedClusters \\\n--scope cluster \\\n-u https://github.com/Azure/gitops-flux2-kustomize-helm-mt \\\n--branch main  \\\n--kustomization name=infra path=./infrastructure prune=true \\\n--kustomization name=apps path=./apps/staging prune=true dependsOn=\\[\"infra\"\\]\n```\n\nThe `microsoft.flux` extension is installed on the cluster (if it wasn't already installed in a previous GitOps deployment).\n\n> [!TIP]\n> The `az k8s-configuration flux create` command deploys the `microsoft.flux` extension to the cluster and creates the configuration. In some scenarios, you may want to create the flux extension instance separately before you create your configuration resources. To do so, use the `az k8s-extension create` command to [create an instance of the extension on your cluster](extensions.md#create-an-extension-instance).\n\nWhen the flux configuration is first installed, the initial compliance state may be `Pending` or `Non-compliant` because reconciliation is still ongoing. After a minute or so, query the configuration again to see the final compliance state.\n\n```azurecli\naz k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters\n```\n\nTo confirm that the deployment was successful, run the following command:\n\n```azurecli\naz k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters\n```",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "c3f1219fc3139b8d09ab6885eeebbbf91a3728ce924425be5d7ec1bdd9eb58df",
    "file_id": "e86c9f8524b4e2887fafe4602021952640d48b815217386227741e43a048021a",
    "chunk_id": "7782b4b433572a1bfd2edae821c55300a640f6b186062b3e59078edefb7f2b54",
    "prev_chunk_id": "597e7789493c0833b75cc4e27aa2d0fa7bf3a865b2e98f635de4fe7f9cfd8d65",
    "next_chunk_id": "410ffa41480ebe9be39d33fe3f95f5b29cc5c98fd102b9a3955003ea353b494c",
    "parent_heading_chunk_id": "4bd8f43f7347b35eee3d60d624a2a62bdbd2443e436197871508e49f8e35b95a",
    "total_chunks_in_file": 51
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "section": [
      "Tutorial: Deploy applications using GitOps with Flux v2",
      "Apply a Flux configuration",
      "[Azure CLI](#tab/azure-cli)"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:34.122066"
}