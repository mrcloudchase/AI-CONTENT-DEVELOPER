{
  "data": {
    "content": "# Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes\n\nAzure provides an automated application deployments capability using GitOps that works with Azure Kubernetes Service (AKS) and Azure Arc-enabled Kubernetes clusters. The key benefits provided by adopting GitOps for deploying applications to Kubernetes clusters include:\n\n* Continual visibility into the status of applications running on clusters.\n* Separation of concerns between application development teams and infrastructure teams. Application teams don't need to have experience with Kubernetes deployments. Platform engineering teams typically create a self-serve model for application teams, empowering them to run deployments with higher confidence.\n* Ability to recreate clusters with the same desired state in case of a crash or to scale out.\n* Ability to [deploy applications at scale](#apply-flux-configurations-at-scale) through Azure Policy.\n\nWith GitOps, you declare the desired state of your Kubernetes clusters in files in Git repositories. The Git repositories may contain the following files:\n\n* [YAML-formatted manifests](https://yaml.org/) that describe Kubernetes resources (such as Namespaces, Secrets, Deployments, and others)\n* [Helm charts](https://helm.sh/docs/topics/charts/) for deploying applications\n* [Kustomize files](https://kustomize.io/) to describe environment-specific changes\n\nBecause these files are stored in a Git repository, they're versioned, and changes between versions are easily tracked. Kubernetes controllers run in the clusters and continually reconcile the cluster state with the desired state declared in the Git repository. These operators pull the files from the Git repositories and apply the desired state to the clusters. The operators also continuously assure that the cluster remains in the desired state.\n\nGitOps on Azure Arc-enabled Kubernetes or Azure Kubernetes Service uses [Flux](https://fluxcd.io/docs/), a popular open-source tool set. Flux provides support for common file sources (Git and Helm repositories, Buckets, Azure Blob Storage) and template types (YAML, Helm, and Kustomize). Flux also supports [multi-tenancy](#multi-tenancy) and deployment dependency management, among other features.\n\nFlux is deployed directly on the cluster, and each cluster's control plane is logically separated. This makes it scale well to hundreds and thousands of clusters. Flux enables pure pull-based GitOps application deployments. No access to clusters is needed by the source repo or by any other cluster.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-gitops-flux2.md",
    "heading_path": [
      "Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes"
    ],
    "section_level": 1,
    "chunk_index": 0,
    "frontmatter": {
      "title": "Application deployments with GitOps (Flux v2)",
      "description": "This article provides a conceptual overview of GitOps in Azure for use in Azure Arc-enabled Kubernetes and Azure Kubernetes Service (AKS) clusters.",
      "ms.date": "04/22/2025",
      "ms.topic": "concept-article",
      "ms.custom": "devx-track-azurecli, references-regions"
    },
    "embedding_content": "Document: Application deployments with GitOps (Flux v2) | Topic: concept-article | Description: This article provides a conceptual overview of GitOps in Azure for use in Azure Arc-enabled Kubernet | Section: Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes | # Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes\n\nAzure provides an automated application deployments capability using GitOps that works with Azure Kubernetes Service (AKS) and Azure Arc-enabled Kubernetes clusters. The key benefits provided by adopting GitOps for deploying applications to Kubernetes clusters include:\n\n* Continual visibility into the status of applications running on clusters.\n* Separation of concerns between application development teams and infrastructure teams. Application teams don't need to have experience with Kubernetes deployments. Platform engineering teams typically create a self-serve model for application teams, empowering them to run deployments with higher confidence.\n* Ability to recreate clusters with the same desired state in case of a crash or to scale out.\n* Ability to [deploy applications at scale](#apply-flux-configurations-at-scale) through Azure Policy.\n\nWith GitOps, you declare the desired state of your Kubernetes clusters in files in Git repositories. The Git repositories may contain the following files:\n\n* [YAML-formatted manifests](https://yaml.org/) that describe Kubernetes resources (such as Namespaces, Secrets, Deployments, and others)\n* [Helm charts](https://helm.sh/docs/topics/charts/) for deploying applications\n* [Kustomize files](https://kustomize.io/) to describe environment-specific changes\n\nBecause these files are stored in a Git repository, they're versioned, and changes between versions are easily tracked. Kubernetes controllers run in the clusters and continually reconcile the cluster state with the desired state declared in the Git repository. These operators pull the files from the Git repositories and apply the desired state to the clusters. The operators also continuously assure that the cluster remains in the desired state.\n\nGitOps on Azure Arc-enabled Kubernetes or Azure Kubernetes Service uses [Flux](https://fluxcd.io/docs/), a popular open-source tool set. Flux provides support for common file sources (Git and Helm repositories, Buckets, Azure Blob Storage) and template types (YAML, Helm, and Kustomize). Flux also supports [multi-tenancy](#multi-tenancy) and deployment dependency management, among other features.\n\nFlux is deployed directly on the cluster, and each cluster's control plane is logically separated. This makes it scale well to hundreds and thousands of clusters. Flux enables pure pull-based GitOps application deployments. No access to clusters is needed by the source repo or by any other cluster.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "024e5fd377e82e842d49654cc2e658d67472340a13e374ae5c697508fdd10917",
    "file_id": "d1c420fd47930a7e5bef901785bdb91b23493b1c6e1945a4a3b89a699dd87eb8",
    "chunk_id": "3d37cc337c31438f14a0a9d3505c4aa38e0f0763931b71d6154268ce05a4a800",
    "prev_chunk_id": null,
    "next_chunk_id": "4c32d52816910e71963aa1d0467b46ecf1e47f32c4f78298846182866117f2ea",
    "parent_heading_chunk_id": null,
    "total_chunks_in_file": 20
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-gitops-flux2.md",
    "section": [
      "Application deployments with GitOps (Flux v2) for AKS and Azure Arc-enabled Kubernetes"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:34.533423"
}