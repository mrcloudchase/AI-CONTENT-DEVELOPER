{
  "data": {
    "content": "## Architecture\n\nWhen the admin [enables the custom locations feature on the cluster](custom-locations.md), a `ClusterRoleBinding` is created on the cluster, authorizing the Microsoft Entra application used by the custom locations resource provider. Once authorized, the custom locations resource provider can create `ClusterRoleBinding` or `RoleBinding` objects that are needed by other Azure resource providers to create custom resources on this cluster. The cluster extensions installed on the cluster determine the list of resource providers to authorize.\n\n:::image type=\"content\" source=\"media/conceptual-custom-locations-usage.png\" alt-text=\"Diagram of custom locations architecture, using Arc-enabled data services as an example.\" lightbox=\"media/conceptual-custom-locations-usage.png\":::\n\n[!INCLUDE [arc-jumpstart-diagram](~/reusable-content/ce-skilling/azure/includes/arc-jumpstart-diagram.md)]\n\nWhen the user creates a data service instance on the cluster:\n\n1. The PUT request is sent to Azure Resource Manager.\n1. The PUT request is forwarded to the Azure Arc-enabled data services resource provider.\n1. The RP fetches the `kubeconfig` file associated with the Azure Arc-enabled Kubernetes cluster on which the custom location exists.\n   * Custom location is referenced as `extendedLocation` in the original PUT request.\n1. The Azure Arc-enabled data services resource provider uses the `kubeconfig` to communicate with the cluster to create a custom resource of the Azure Arc-enabled data services type on the namespace mapped to the custom location.\n   * The Azure Arc-enabled data services operator was deployed via cluster extension creation before the custom location existed.\n1. The Azure Arc-enabled data services operator reads the new custom resource created on the cluster and creates the data controller, translating into realization of the desired state on the cluster.\n\nThe sequence of steps to create the SQL managed instance and PostgreSQL instance are identical to the sequence of steps described above.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-custom-locations.md",
    "heading_path": [
      "Custom locations with Azure Arc-enabled Kubernetes",
      "Architecture"
    ],
    "section_level": 2,
    "chunk_index": 1,
    "frontmatter": {
      "title": "Custom locations with Azure Arc-enabled Kubernetes",
      "ms.date": "04/21/2025",
      "ms.topic": "concept-article",
      "description": "This article provides a conceptual overview of the custom locations capability of Azure Arc-enabled Kubernetes."
    },
    "embedding_content": "Document: Custom locations with Azure Arc-enabled Kubernetes | Topic: concept-article | Description: This article provides a conceptual overview of the custom locations capability of Azure Arc-enabled  | Section: Custom locations with Azure Arc-enabled Kubernetes > Architecture | ## Architecture\n\nWhen the admin [enables the custom locations feature on the cluster](custom-locations.md), a `ClusterRoleBinding` is created on the cluster, authorizing the Microsoft Entra application used by the custom locations resource provider. Once authorized, the custom locations resource provider can create `ClusterRoleBinding` or `RoleBinding` objects that are needed by other Azure resource providers to create custom resources on this cluster. The cluster extensions installed on the cluster determine the list of resource providers to authorize.\n\n:::image type=\"content\" source=\"media/conceptual-custom-locations-usage.png\" alt-text=\"Diagram of custom locations architecture, using Arc-enabled data services as an example.\" lightbox=\"media/conceptual-custom-locations-usage.png\":::\n\n[!INCLUDE [arc-jumpstart-diagram](~/reusable-content/ce-skilling/azure/includes/arc-jumpstart-diagram.md)]\n\nWhen the user creates a data service instance on the cluster:\n\n1. The PUT request is sent to Azure Resource Manager.\n1. The PUT request is forwarded to the Azure Arc-enabled data services resource provider.\n1. The RP fetches the `kubeconfig` file associated with the Azure Arc-enabled Kubernetes cluster on which the custom location exists.\n   * Custom location is referenced as `extendedLocation` in the original PUT request.\n1. The Azure Arc-enabled data services resource provider uses the `kubeconfig` to communicate with the cluster to create a custom resource of the Azure Arc-enabled data services type on the namespace mapped to the custom location.\n   * The Azure Arc-enabled data services operator was deployed via cluster extension creation before the custom location existed.\n1. The Azure Arc-enabled data services operator reads the new custom resource created on the cluster and creates the data controller, translating into realization of the desired state on the cluster.\n\nThe sequence of steps to create the SQL managed instance and PostgreSQL instance are identical to the sequence of steps described above.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "01123cc4598d941d8ce786c89f64075ea06d1b24f406e42539abf98cd1dd5b45",
    "file_id": "b53b4c751616d3a3ba6ca1c521d2bef5470611d7fc8c77fdea9aee3e8582da39",
    "chunk_id": "4d89f3091e105e598fd0591d0ac84501ec5ebd58e914f1e9d3119a572e265161",
    "prev_chunk_id": "c94feb760683b2b13fd2f0c64f5ecf41f00ddf6082833f2513502f1c10522b4a",
    "next_chunk_id": "e9f5130f79a307520f8385eb2f93589a70cee2f173e2b9e20a762868fd6c784b",
    "parent_heading_chunk_id": "0d694154ab0dd37c1d89208ad2358709da127a02936719d647bcfa7f6f6be896",
    "total_chunks_in_file": 3
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-custom-locations.md",
    "section": [
      "Custom locations with Azure Arc-enabled Kubernetes",
      "Architecture"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:33.785219"
}