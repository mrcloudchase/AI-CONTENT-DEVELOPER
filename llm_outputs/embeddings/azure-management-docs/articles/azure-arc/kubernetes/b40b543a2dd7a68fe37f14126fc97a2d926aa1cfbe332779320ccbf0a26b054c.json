{
  "data": {
    "content": "### Understand deployment target assignment manifests\n\nBefore you continue, take a closer look at the generated assignment manifests for the `functional-test` deployment target. There are `namespace.yaml`, `platform-config.yaml` and `reconciler.yaml` manifest files.\n\n`namespace.yaml` defines a namespace that will be created on any `drone` cluster where the `hello-world` application runs.\n \n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: \"dev-drone-hello-world-app-functional-test\" \n  labels:\n    environment: \"dev\"\n    workspace: \"kaizen-app-team\"\n    workload: \"hello-world-app\"\n    deploymentTarget: \"hello-world-app-functional-test\"\n    someLabel: some-value\n```\n\n`platform-config.yaml` contains all platform configuration values available on any `drone` cluster that the application can use in the `Dev` environment.\n \n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: platform-config\n  namespace: dev-drone-hello-world-app-functional-test\ndata:\n  CLUSTER_NAME: Drone\n  DATABASE_URL: mysql://restricted-host:3306/mysqlrty123\n  ENVIRONMENT: Dev\n  REGION: East US\n  SOME_COMMON_ENVIRONMENT_VARIABLE: \"false\"\n```\n\n`reconciler.yaml` contains Flux resources that a `drone` cluster uses to fetch application manifests, prepared by the Application Team for the `functional-test` deployment target.\n \n```yaml\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: GitRepository\nmetadata:\n  name: \"hello-world-app-functional-test\"\n  namespace: flux-system\nspec:\n  interval: 15s\n  url: \"https://github.com/eedorenko/kalypso-tut-test-app-gitops\"\n  ref:\n    branch: \"dev\"\n  secretRef:\n      name: repo-secret    \n---\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: \"hello-world-app-functional-test\"\n  namespace: flux-system\nspec:\n  interval: 30s\n  targetNamespace: \"dev-drone-hello-world-app-functional-test\"\n  sourceRef:\n    kind: GitRepository\n    name: \"hello-world-app-functional-test\"\n  path: \"./functional-test\" \n  prune: true\n```\n\n> [!NOTE]\n> The `control plane` defines that the `drone` cluster type uses `Flux` to reconcile manifests from the application GitOps repositories. Therefore `reconciler.yaml` file contains `GitRepository` and `Kustomization` resources.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "heading_path": [
      "Create a scheduling policy for the performance-test deployment target",
      "Understand deployment target assignment manifests"
    ],
    "section_level": 2,
    "chunk_index": 12,
    "frontmatter": {
      "title": "Explore workload management in a multi-cluster environment with GitOps",
      "description": "Explore typical use-cases that Platform and Application teams face on a daily basis working with Kubernetes workloads in a multi-cluster environment.",
      "keywords": "GitOps, Flux, Kubernetes, K8s, Azure, Arc, AKS, ci/cd, devops",
      "author": "eedorenko",
      "ms.author": "iefedore",
      "ms.topic": "how-to",
      "ms.date": "03/29/2023"
    },
    "embedding_content": "Document: Explore workload management in a multi-cluster environment with GitOps | Topic: how-to | Description: Explore typical use-cases that Platform and Application teams face on a daily basis working with Kub | Section: Create a scheduling policy for the performance-test deployment target > Understand deployment target assignment manifests | ### Understand deployment target assignment manifests\n\nBefore you continue, take a closer look at the generated assignment manifests for the `functional-test` deployment target. There are `namespace.yaml`, `platform-config.yaml` and `reconciler.yaml` manifest files.\n\n`namespace.yaml` defines a namespace that will be created on any `drone` cluster where the `hello-world` application runs.\n \n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: \"dev-drone-hello-world-app-functional-test\" \n  labels:\n    environment: \"dev\"\n    workspace: \"kaizen-app-team\"\n    workload: \"hello-world-app\"\n    deploymentTarget: \"hello-world-app-functional-test\"\n    someLabel: some-value\n```\n\n`platform-config.yaml` contains all platform configuration values available on any `drone` cluster that the application can use in the `Dev` environment.\n \n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: platform-config\n  namespace: dev-drone-hello-world-app-functional-test\ndata:\n  CLUSTER_NAME: Drone\n  DATABASE_URL: mysql://restricted-host:3306/mysqlrty123\n  ENVIRONMENT: Dev\n  REGION: East US\n  SOME_COMMON_ENVIRONMENT_VARIABLE: \"false\"\n```\n\n`reconciler.yaml` contains Flux resources that a `drone` cluster uses to fetch application manifests, prepared by the Application Team for the `functional-test` deployment target.\n \n```yaml\napiVersion: source.toolkit.fluxcd.io/v1beta2\nkind: GitRepository\nmetadata:\n  name: \"hello-world-app-functional-test\"\n  namespace: flux-system\nspec:\n  interval: 15s\n  url: \"https://github.com/eedorenko/kalypso-tut-test-app-gitops\"\n  ref:\n    branch: \"dev\"\n  secretRef:\n      name: repo-secret    \n---\napiVersion: kustomize.toolkit.fluxcd.io/v1beta2\nkind: Kustomization\nmetadata:\n  name: \"hello-world-app-functional-test\"\n  namespace: flux-system\nspec:\n  interval: 30s\n  targetNamespace: \"dev-drone-hello-world-app-functional-test\"\n  sourceRef:\n    kind: GitRepository\n    name: \"hello-world-app-functional-test\"\n  path: \"./functional-test\" \n  prune: true\n```\n\n> [!NOTE]\n> The `control plane` defines that the `drone` cluster type uses `Flux` to reconcile manifests from the application GitOps repositories. Therefore `reconciler.yaml` file contains `GitRepository` and `Kustomization` resources.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "6e137181444fff60180da021b466d9a36a4a03335191d43a16f74fb9220f0be3",
    "file_id": "860938b8acc2edaecb7d029e76e899735c706b1e333677a4f8a2ac5adf75a619",
    "chunk_id": "b40b543a2dd7a68fe37f14126fc97a2d926aa1cfbe332779320ccbf0a26b054c",
    "prev_chunk_id": "e120581d2a314a3910de746be9362ce6d3e6ff6e9b38cd0972d77f00e9c79a81",
    "next_chunk_id": "79adb1b40bfec1f017d32aa7382b576785e6161843eb2161b273bd9d3a1bfcb6",
    "parent_heading_chunk_id": "fcd2f64e241b79d3a9fff72a0689c058e9ee852fe9f283886462824ff80c7a6f",
    "total_chunks_in_file": 32
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/workload-management.md",
    "section": [
      "Create a scheduling policy for the performance-test deployment target",
      "Understand deployment target assignment manifests"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-03T19:17:34.146187"
}