{
  "data": {
    "content": "## Manage Helm chart releases by using the Flux Helm controller\n\nThe Flux Helm controller is installed as part of the `microsoft.flux` cluster extension. It allows you to declaratively manage Helm chart releases with Kubernetes manifests that you maintain in your Git repository.\n\nFor usage details, see the following resources:\n\n* [Flux for Helm users](https://fluxcd.io/docs/use-cases/helm/)\n* [Manage Helm releases](https://fluxcd.io/docs/guides/helmreleases/)\n* [Migrate to the Helm controller](https://fluxcd.io/docs/migration/helm-operator-migration/)\n* [Helm controller](https://fluxcd.io/docs/components/helm/)\n\n> [!TIP]\n> Because of how Helm handles index files, processing Helm charts is an expensive operation and can have a high memory footprint. As a result, reconciling a large number of Helm charts at once can cause memory spikes and `OOMKilled` errors. By default, the controller sets its memory limit at 1Gi and its memory requests at 64Mi. To increase this limit and requests due to a high number of large Helm chart reconciliations, run the following command after installing the microsoft.flux extension:\n>\n> `az k8s-extension update -g <resource-group> -c <cluster-name> -n flux -t connectedClusters --config source-controller.resources.limits.memory=2Gi source-controller.resources.requests.memory=300Mi`",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "heading_path": [
      "Tutorial: Deploy applications using GitOps with Flux v2",
      "Manage Helm chart releases by using the Flux Helm controller"
    ],
    "section_level": 2,
    "chunk_index": 29,
    "frontmatter": {
      "title": "Tutorial: Deploy applications using GitOps with Flux v2",
      "description": "This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deployment in Azure Arc and AKS clusters.",
      "ms.date": "03/26/2025",
      "ms.topic": "tutorial",
      "ms.custom": "template-tutorial, devx-track-azurecli, references_regions"
    },
    "embedding_content": "Document: Tutorial: Deploy applications using GitOps with Flux v2 | Topic: tutorial | Description: This tutorial shows how to use GitOps with Flux v2 to manage configuration and application deploymen | Section: Tutorial: Deploy applications using GitOps with Flux v2 > Manage Helm chart releases by using the Flux Helm controller | ## Manage Helm chart releases by using the Flux Helm controller\n\nThe Flux Helm controller is installed as part of the `microsoft.flux` cluster extension. It allows you to declaratively manage Helm chart releases with Kubernetes manifests that you maintain in your Git repository.\n\nFor usage details, see the following resources:\n\n* [Flux for Helm users](https://fluxcd.io/docs/use-cases/helm/)\n* [Manage Helm releases](https://fluxcd.io/docs/guides/helmreleases/)\n* [Migrate to the Helm controller](https://fluxcd.io/docs/migration/helm-operator-migration/)\n* [Helm controller](https://fluxcd.io/docs/components/helm/)\n\n> [!TIP]\n> Because of how Helm handles index files, processing Helm charts is an expensive operation and can have a high memory footprint. As a result, reconciling a large number of Helm charts at once can cause memory spikes and `OOMKilled` errors. By default, the controller sets its memory limit at 1Gi and its memory requests at 64Mi. To increase this limit and requests due to a high number of large Helm chart reconciliations, run the following command after installing the microsoft.flux extension:\n>\n> `az k8s-extension update -g <resource-group> -c <cluster-name> -n flux -t connectedClusters --config source-controller.resources.limits.memory=2Gi source-controller.resources.requests.memory=300Mi`",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "f7de9e63827ccaea48c17482d29aaf89314f2017bbc4e2612d19bd020f452f02",
    "file_id": "e86c9f8524b4e2887fafe4602021952640d48b815217386227741e43a048021a",
    "chunk_id": "a8dfbe61a602773145804b3260adf1c1367d0387f44bbfd8e4332d0fd09d5b75",
    "prev_chunk_id": "6a7c8b010f1f1916a0ae8acd69a573a79758e376145b6a8057c832a7154ec396",
    "next_chunk_id": "a57cd04983deb39e65b30910193d5568e0b1b187e902be1834ef935f9aede74e",
    "parent_heading_chunk_id": "4d4807af515438c779a11a6a65d8db9d7187654cee19c5a8f252a8e0b546ad6a",
    "total_chunks_in_file": 51
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/tutorial-use-gitops-flux2.md",
    "section": [
      "Tutorial: Deploy applications using GitOps with Flux v2",
      "Manage Helm chart releases by using the Flux Helm controller"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.815409"
}