{
  "data": {
    "content": "### Promotion and scheduling\n\nThe control plane repository contains two types of data:\n\n* Data that gets promoted across environments, such as a list of onboarded workloads and various templates.\n* Environment-specific configurations, such as included environment cluster types, config values, and scheduling policies. This data isn't promoted, as it's specific to each environment.\n\nThe data to be promoted is stored in the `main` branch. Environment-specific data is stored in the corresponding environment branches such as example `dev`, `qa`, and `prod`. Transforming data from the control plane to the GitOps repo is a combination of the promotion and scheduling flows. The promotion flow moves the change across the environments horizontally; the scheduling flow does the scheduling and generates manifests vertically for each environment.\n\n:::image type=\"content\" source=\"media/concept-workload-management/promotion-flow.png\" alt-text=\"Diagram showing promotion flow.\" lightbox=\"media/concept-workload-management/promotion-flow.png\":::\n\nA commit to the `main` branch starts the promotion flow that triggers the scheduling flow for each environment one by one. The scheduling flow takes the base manifests from `main`, applies config values from a corresponding to this environment branch, and creates a PR with the resulting manifests to the platform GitOps repository. Once the rollout on this environment is complete and successful, the promotion flow goes ahead and performs the same procedure on the next environment. On each environment, the flow promotes the same commit ID of the `main` branch, making sure that the content from `main` goes to the next environment only after successful deployment to the previous environment.\n\nA commit to the environment branch in the control plane repository starts the scheduling flow for this environment. For example, perhaps you have configured cosmo-db endpoint in the QA environment. You only want to update the QA branch of the platform GitOps repository, without touching anything else. The scheduling takes the `main` content, corresponding to the latest commit ID promoted to this environment, applies configurations, and promotes the resulting manifests to the platform GitOps branch.",
    "file_path": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "heading_path": [
      "Workload management in a multi-cluster environment with GitOps",
      "Solution architecture",
      "Promotion and scheduling"
    ],
    "section_level": 3,
    "chunk_index": 9,
    "frontmatter": {
      "title": "Workload management in a multi-cluster environment with GitOps",
      "description": "This article provides a conceptual overview of the workload management in a multi-cluster environment with GitOps.",
      "ms.date": "03/29/2023",
      "ms.topic": "concept-article",
      "author": "eedorenko",
      "ms.author": "iefedore"
    },
    "embedding_content": "Document: Workload management in a multi-cluster environment with GitOps | Topic: concept-article | Description: This article provides a conceptual overview of the workload management in a multi-cluster environmen | Section: Workload management in a multi-cluster environment with GitOps > Solution architecture > Promotion and scheduling | ### Promotion and scheduling\n\nThe control plane repository contains two types of data:\n\n* Data that gets promoted across environments, such as a list of onboarded workloads and various templates.\n* Environment-specific configurations, such as included environment cluster types, config values, and scheduling policies. This data isn't promoted, as it's specific to each environment.\n\nThe data to be promoted is stored in the `main` branch. Environment-specific data is stored in the corresponding environment branches such as example `dev`, `qa`, and `prod`. Transforming data from the control plane to the GitOps repo is a combination of the promotion and scheduling flows. The promotion flow moves the change across the environments horizontally; the scheduling flow does the scheduling and generates manifests vertically for each environment.\n\n:::image type=\"content\" source=\"media/concept-workload-management/promotion-flow.png\" alt-text=\"Diagram showing promotion flow.\" lightbox=\"media/concept-workload-management/promotion-flow.png\":::\n\nA commit to the `main` branch starts the promotion flow that triggers the scheduling flow for each environment one by one. The scheduling flow takes the base manifests from `main`, applies config values from a corresponding to this environment branch, and creates a PR with the resulting manifests to the platform GitOps repository. Once the rollout on this environment is complete and successful, the promotion flow goes ahead and performs the same procedure on the next environment. On each environment, the flow promotes the same commit ID of the `main` branch, making sure that the content from `main` goes to the next environment only after successful deployment to the previous environment.\n\nA commit to the environment branch in the control plane repository starts the scheduling flow for this environment. For example, perhaps you have configured cosmo-db endpoint in the QA environment. You only want to update the QA branch of the platform GitOps repository, without touching anything else. The scheduling takes the `main` content, corresponding to the latest commit ID promoted to this environment, applies configurations, and promotes the resulting manifests to the platform GitOps branch.",
    "embedding": null,
    "embedding_model": null,
    "embedding_generated_at": null,
    "content_hash": "69a18c5df4429d7a2f6662fc2866dadcc9684ea1f760a3e9f2030c4762c86e1e",
    "file_id": "68b84d3ed0d9d36d4ec56ccb018594e09d36629cea891036b7b04a8fba544e6e",
    "chunk_id": "db0a8eb0cf69d7f76f8c728c9ab04ba651394700d09da87d7d7ca2f86071a485",
    "prev_chunk_id": "c6cbdf70cc68b88524f44e6f66c43930e1051f4e0b10ee72b64d2328b7cc3184",
    "next_chunk_id": "9a89eae18835e8eae6f201d7c40c4a532195117c8a19f0bd9e2eb5fbbd0bac5e",
    "parent_heading_chunk_id": "57fb9dec7e7eb4fd29ccd39cfbb36509166926f31cbe905690418269fa199579",
    "total_chunks_in_file": 31
  },
  "meta": {
    "type": "chunk",
    "file": "/Users/cloudchase/Desktop/Vibe_Coding/Cursor/ai-content-developer/work/tmp/azure-management-docs/articles/azure-arc/kubernetes/conceptual-workload-management.md",
    "section": [
      "Workload management in a multi-cluster environment with GitOps",
      "Solution architecture",
      "Promotion and scheduling"
    ],
    "has_embedding": false
  },
  "timestamp": "2025-06-02T15:36:19.224014"
}