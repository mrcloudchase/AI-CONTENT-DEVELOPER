=== MATERIALS_SUMMARY ===
2025-05-30T23:58:32.842112
==================================================

Technical Document Analysis Task:

SOURCE: https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium

CONTENT TO ANALYZE:
Configure Azure CNI Powered by Cilium in Azure Kubernetes Service (AKS) - Azure Kubernetes Service | Microsoft Learn
Skip to main content
Skip to Ask Learn chat experience
This browser is no longer supported.
Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support.
Download Microsoft Edge
More info about Internet Explorer and Microsoft Edge
Table of contents
Exit focus mode
Ask Learn
Ask Learn
Read in English
Save
Table of contents
Read in English
Add
Add to plan
Edit
Share via
Facebook
x.com
LinkedIn
Email
Print
Note
Access to this page requires authorization. You can try signing in or changing directories.
Access to this page requires authorization. You can try changing directories.
Configure Azure CNI Powered by Cilium in Azure Kubernetes Service (AKS)
Article
2025-05-22
17 contributors
Feedback
In this article
Azure CNI Powered by Cilium combines the robust control plane of Azure CNI with the data plane of Cilium to provide high-performance networking and security.
By making use of eBPF programs loaded into the Linux kernel and a more efficient API object structure, Azure CNI Powered by Cilium provides the following benefits:
Functionality equivalent to existing Azure CNI and Azure CNI Overlay plugins
Improved Service routing
More efficient network policy enforcement
Better observability of cluster traffic
Support for larger clusters (more nodes, pods, and services)
IP Address Management (IPAM) with Azure CNI Powered by Cilium
Azure CNI Powered by Cilium can be deployed using two different methods for assigning pod IPs:
Assign IP addresses from an overlay network (similar to Azure CNI Overlay mode)
Assign IP addresses from a virtual network (similar to existing Azure CNI with Dynamic Pod IP Assignment)
If you aren't sure which option to select, read "Choosing a network model to use."
Versions
Kubernetes Version
Minimum Cilium Version
1.27 (LTS)
1.13.18
1.28 (End of Life)
1.13.18
1.29
1.14.19
1.30 (LTS)
1.14.19
1.31
1.16.6
1.32
1.17.0
See Supported Kubernetes Versions for more information on AKS versioning and release timelines.
Network Policy Enforcement
Cilium enforces network policies to allow or deny traffic between pods. With Cilium, you don't need to install a separate network policy engine such as Azure Network Policy Manager or Calico.
Limitations
Azure CNI powered by Cilium currently has the following limitations:
Available only for Linux and not for Windows.
Network policies can't use ipBlock to allow access to node or pod IPs. See frequently asked questions for details and recommended workaround.
Multiple Kubernetes services can't use the same host port with different protocols (for example, TCP or UDP) (Cilium issue #14287).
Network policies may be enforced on reply packets when a pod connects to itself via service cluster IP (Cilium issue #19406).
Network policies aren't applied to pods using host networking (spec.hostNetwork: true) because these pods use the host identity instead of having individual identities.
Cilium Endpoint Slices are supported in Kubernetes version 1.32 and above. Cilium Endpoint Slices do not support configuration of how Cilium Endpoints are grouped. Priority namespaces through cilium.io/ces-namespace is not supported.
Considerations
To gain capabilities such as observability into your network traffic and security features like Fully Qualified Domain Name (FQDN) based filtering and Layer 7-based network policies on your cluster, consider enabling Advanced Container Networking services on your clusters.
Prerequisites
Azure CLI version 2.48.1 or later. Run az --version to see the currently installed version. If you need to install or upgrade, see Install Azure CLI.
If using ARM templates or the REST API, the AKS API version must be 2022-09-02-preview or later.
Note
Previous AKS API versions (2022-09-02preview to 2023-01-02preview) used the field networkProfile.ebpfDataplane=cilium. AKS API versions since 2023-02-02preview use the field networkProfile.networkDataplane=cilium to enable Azure CNI Powered by Cilium.
Create a new AKS Cluster with Azure CNI Powered by Cilium
Option 1: Assign IP addresses from an overlay network
Use the following commands to create a cluster with an overlay network and Cilium. Replace the values for <clusterName>, <resourceGroupName>, and <location>:
az aks create \
--name <clusterName> \
--resource-group <resourceGroupName> \
--location <location> \
--network-plugin azure \
--network-plugin-mode overlay \
--pod-cidr 192.168.0.0/16 \
--network-dataplane cilium \
--generate-ssh-keys
Note
The --network-dataplane cilium flag replaces the deprecated --enable-ebpf-dataplane flag used in earlier versions of the aks-preview CLI extension.
Option 2: Assign IP addresses from a virtual network
Run the following commands to create a resource group and virtual network with a subnet for nodes and a subnet for pods.
# Create the resource group
az group create --name <resourceGroupName> --location <location>
# Create a virtual network with a subnet for nodes and a subnet for pods
az network vnet create --resource-group <resourceGroupName> --location <location> --name <vnetName> --address-prefixes <address prefix, example: 10.0.0.0/8> -o none
az network vnet subnet create --resource-group <resourceGroupName> --vnet-name <vnetName> --name nodesubnet --address-prefixes <address prefix, example: 10.240.0.0/16> -o none
az network vnet subnet create --resource-group <resourceGroupName> --vnet-name <vnetName> --name podsubnet --address-prefixes <address prefix, example: 10.241.0.0/16> -o none
Create the cluster using --network-dataplane cilium:
az aks create \
--name <clusterName> \
--resource-group <resourceGroupName> \
--location <location> \
--max-pods 250 \
--network-plugin azure \
--vnet-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/nodesubnet \
--pod-subnet-id /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers/Microsoft.Network/virtualNetworks/<vnetName>/subnets/podsubnet \
--network-dataplane cilium \
--generate-ssh-keys
Option 3: Assign IP addresses from the Node Subnet
Note
Azure CLI version 2.69.0 or later is required. Run az --version to see the currently installed version. If you need to install or upgrade, see Install Azure CLI.
Create a cluster using node subnet with a Cilium dataplane:
az aks create \
--name <clusterName> \
--resource-group <resourceGroupName> \
--location <location> \
--network-plugin azure \
--network-dataplane cilium \
--generate-ssh-keys
Frequently asked questions
Can I customize Cilium configuration?
No, AKS manages the Cilium configuration and it can't be modified. We recommend that customers who require more control use AKS BYO CNI and install Cilium manually.
Can I use CiliumNetworkPolicy custom resources instead of Kubernetes NetworkPolicy resources?
Customers may use FQDN filtering and Layer 7 Policies as part of the Advanced Container Networking Services feature bundle.
Can I use ClusterwideCiliumNetworkPolicy?
ClusterwideCiliumNetworkPolicy is not supported.
Which Cilium features are supported in Azure managed CNI? Which of those require Advanced Container Networking Services?
Supported Feature
w/o ACNS
w/ ACNS
Cilium Endpoint Slices
âï¸
âï¸
K8s Network Policies
âï¸
âï¸
Cilium L3/L4 Network Policies
âï¸
âï¸
FQDN Filtering
â
âï¸
L7 Network Policies (HTTP/gRPC/Kafka)
â
âï¸
Container Network Observability (Metrics and Flow logs )
â
âï¸
Why is traffic being blocked when the NetworkPolicy has an ipBlock that allows the IP address?
A limitation of Azure CNI Powered by Cilium is that a NetworkPolicy's ipBlock can't select pod or node IPs.
For example, this NetworkPolicy has an ipBlock that allows all egress to 0.0.0.0/0:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
name: example-ipblock
spec:
podSelector: {}
policyTypes:
- Egress
egress:
- to:
- ipBlock:
cidr: 0.0.0.0/0 # This will still block pod and node IPs.
However, when this NetworkPolicy is applied, Cilium blocks egress to pod and node IPs even though the IPs are within the ipBlock CIDR.
As a workaround, you can add namespaceSelector and podSelector to select pods. This example selects all pods in all namespaces:
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
name: example-ipblock
spec:
podSelector: {}
policyTypes:
- Egress
egress:
- to:
- ipBlock:
cidr: 0.0.0.0/0
- namespaceSelector: {}
- podSelector: {}
Note
It isn't currently possible to specify a NetworkPolicy with an ipBlock to allow traffic to node IPs.
Does AKS configure CPU or memory limits on the Cilium daemonset?
No, AKS doesn't configure CPU or memory limits on the Cilium daemonset because Cilium is a critical system component for pod networking and network policy enforcement.
Does Azure CNI powered by Cilium use Kube-Proxy?
No, AKS clusters created with network dataplane as Cilium don't use Kube-Proxy.
If the AKS clusters are on Azure CNI Overlay or Azure CNI with dynamic IP allocation and are upgraded to AKS clusters running Azure CNI powered by Cilium, new nodes workloads are created without kube-proxy. Older workloads are also migrated to run without kube-proxy as a part of this upgrade process.
Next steps
Learn more about networking in AKS in the following articles:
Upgrade Azure CNI IPAM modes and Dataplane Technology.
Use a static IP address with the Azure Kubernetes Service (AKS) load balancer
Use an internal load balancer with Azure Container Service (AKS)
Create a basic ingress controller with external network connectivity
Collaborate with us on GitHub
The source for this content can be found on GitHub, where you can also create and review issues and pull requests. For more information, see our contributor guide.
Azure Kubernetes Service
Open a documentation issue
Provide product feedback
Additional resources
Additional resources
In this article
en-us
Your Privacy Choices
Theme
Light
Dark
High contrast
Previous Versions
Blog
Contribute
Privacy
Terms of Use
Trademarks
© Microsoft 2025

TASK: Perform comprehensive technical document analysis with structured data extraction.

MANDATORY PLANNING PROCESS:
1. READ: Systematically examine the entire content for technical details
2. CATEGORIZE: Determine document type and primary subject matter
3. EXTRACT: Identify all technologies, tools, concepts, and Microsoft products mentioned
4. VALIDATE: Verify all extracted information exists in the source content
5. SYNTHESIZE: Create comprehensive summary of purpose, scope, and technical value
6. STRUCTURE: Format findings into exact JSON specification

CRITICAL EXTRACTION REQUIREMENTS:
- technologies: Array of ALL technical tools, frameworks, services mentioned
- key_concepts: Array of ALL important concepts, methodologies, approaches
- microsoft_products: Array of ALL Microsoft/Azure products, services, tools
- main_topic: Single primary subject (e.g., "Azure CNI Networking", "Kubernetes Security")
- document_type: Specific type (e.g., "Technical Guide", "API Documentation", "Tutorial")
- summary: Comprehensive overview (100-200 words covering purpose, scope, key insights)

EXAMPLE OUTPUT FORMAT:
{
  "thinking": "I systematically analyzed the Azure CNI documentation. First, I identified this as a technical implementation guide focused on container networking. I extracted specific technologies: Azure CNI, Cilium, Kubernetes, eBPF. Key concepts include endpoint slices, network policies, automatic configuration. Microsoft products mentioned are AKS, Azure Virtual Network, Azure Resource Manager. The document provides comprehensive coverage of advanced networking configuration with specific implementation examples.",
  "main_topic": "Azure CNI Cilium Integration",
  "technologies": ["Azure CNI", "Cilium", "Kubernetes", "eBPF", "CiliumEndpointSlices"],
  "key_concepts": ["network policies", "endpoint slices", "automatic configuration", "container networking"],
  "microsoft_products": ["Azure Kubernetes Service", "Azure Virtual Network", "Azure Resource Manager"],
  "document_type": "Technical Implementation Guide",
  "summary": "Comprehensive guide covering Azure CNI integration with Cilium for advanced Kubernetes networking. Details automatic configuration of CiliumEndpointSlices, network policy implementation, and eBPF-based networking optimization. Provides specific configuration examples, troubleshooting steps, and best practices for production deployment in Azure Kubernetes Service environments.",
  "source": "https://learn.microsoft.com/en-us/azure/aks/azure-cni-powered-by-cilium"
}

YOU MUST RETURN EXACTLY THIS JSON FORMAT. NO DEVIATIONS ALLOWED.